# Copyright Luke Ceddia
# SPDX-License-Identifier: Apache-2.0
# tokens.list - Description of parser tokens

generic unknown   ; internal
# ieof -> internal eof, so as to not clash with the EOF function
generic ieof       ; internal
# End Of Input - used to signify the end of a user's input in interactive
# mode (can't use newline because we're always looking one token ahead).
generic eoi       ; internal
generic newline   ; direct internal
generic comma     ; direct internal
generic semicolon ; direct internal
generic .(dot)    ; direct
generic rem
generic linenum   ; internal

# Metacommands
meta list
meta debug
meta include
meta option
# Represent an unknown metacommand so we can ignore it
meta unknown            ; internal

# The meta parameter is everything after the first : or space.
# It is up to the implementation of each metacommand to break apart this content.
literal metaparam       ; direct

# Type symbols
generic integer_sfx     ; direct internal
generic long_sfx        ; direct internal
generic integer64_sfx   ; direct internal
generic single_sfx      ; direct internal
generic double_sfx      ; direct internal
generic quad_sfx        ; direct internal
generic string_sfx      ; direct internal

# Types and pseudotypes
# Signals "no value" in some sense
type none               0 ; internal
# Flexible number of arbitrary arguments (looking at you, INPUT)
type list               0 ; internal
#Represents a 32 bit integer specifically expecting an AST_FLAGS (see cmdflags.bi for values)
type flags              0 ; internal
# Generic type that can be cast to anything
type any                0 ; internal
# Generic array type
arraytype any_array any 0 ; internal
# 1 bit
type bool               1
# 16 bits
type integer            16
# 32 bits
type long               32
# 64 bits
type integer64          64
# binary32 floating-point
type single             32
# binary64 floating-point
type double             64
# binary128 floating-point
type quad               128
# Everyone's favourite non-numeric type
type string             64
# See comment below on corresponding literal
type contextual_argument 0

# Parentheses don't have any real meaning, they only direct the parsing
generic oparen ; direct internal
generic cparen ; direct internal

# [ and ] are used to denote the number of array dimensions when their sizes
# are otherwise unknown
generic obracket ; direct internal
generic cbracket ; direct internal

# Not currently used for anything
generic obrace ; direct internal
generic cbrace ; direct internal

# Numbers
# numint: 1234, numdec: 12.34, numexp: 12.3E4, numbase: &H1234
literal numint ; direct
literal numdec ; direct
literal numexp ; direct
literal numbase ; direct
# A string
literal stringlit ; direct
# Used to represent a list of arguments that can be provided to a function as
# unquoted literals. This literal is never produced by the parser, it is simply
# to tag those constants as such.
literal contextual_argument


# Literals have a hard-coded precedence of 1, which needs to be lower than any other
# The precedence of NOT may surprise you; NOT 2 + 3 is NOT (2 + 3).
# Note -3^2 = -(3^2)
#       name   precedence  assoc.   return    args                link_name
infix   imp             2   left    integer   integer,integer
infix   imp             2   left    long      long,long
infix   imp             2   left    integer64 integer64,integer64
infix   eqv             3   left    integer   integer,integer
infix   eqv             3   left    long      long,long
infix   eqv             3   left    integer64 integer64,integer64
infix   xor             4   left    integer   integer,integer
infix   xor             4   left    long      long,long
infix   xor             4   left    integer64 integer64,integer64
infix   or              5   left    integer   integer,integer
infix   or              5   left    long      long,long
infix   or              5   left    integer64 integer64,integer64
infix   and             6   left    integer   integer,integer
infix   and             6   left    long      long,long
infix   and             6   left    integer64 integer64,integer64
prefix  not             7           integer   integer 
prefix  not             7           long      long
prefix  not             7           integer64 integer64
infix   =(equals)       8   left    bool      string,string       STR_EQ  ; direct
infix   =(equals)       8   left    bool      integer,integer             ; direct
infix   =(equals)       8   left    bool      long,long                   ; direct
infix   =(equals)       8   left    bool      integer64,integer64         ; direct
infix   =(equals)       8   left    bool      single,single               ; direct
infix   =(equals)       8   left    bool      double,double               ; direct
infix   =(equals)       8   left    bool      quad,quad                   ; direct
infix   <>(cmp_neq)     8   left    bool      string,string       STR_NE  ; direct
infix   <>(cmp_neq)     8   left    bool      integer,integer             ; direct
infix   <>(cmp_neq)     8   left    bool      long,long                   ; direct
infix   <>(cmp_neq)     8   left    bool      integer64,integer64         ; direct
infix   <>(cmp_neq)     8   left    bool      single,single               ; direct
infix   <>(cmp_neq)     8   left    bool      double,double               ; direct
infix   <>(cmp_neq)     8   left    bool      quad,quad                   ; direct
infix   <(cmp_lt)       8   left    bool      string,string       STR_LT  ; direct
infix   <(cmp_lt)       8   left    bool      integer,integer             ; direct
infix   <(cmp_lt)       8   left    bool      long,long                   ; direct
infix   <(cmp_lt)       8   left    bool      integer64,integer64         ; direct
infix   <(cmp_lt)       8   left    bool      single,single               ; direct
infix   <(cmp_lt)       8   left    bool      double,double               ; direct
infix   <(cmp_lt)       8   left    bool      quad,quad                   ; direct
infix   >(cmp_gt)       8   left    bool      string,string       STR_GT  ; direct
infix   >(cmp_gt)       8   left    bool      integer,integer             ; direct
infix   >(cmp_gt)       8   left    bool      long,long                   ; direct
infix   >(cmp_gt)       8   left    bool      integer64,integer64         ; direct
infix   >(cmp_gt)       8   left    bool      single,single               ; direct
infix   >(cmp_gt)       8   left    bool      double,double               ; direct
infix   >(cmp_gt)       8   left    bool      quad,quad                   ; direct
infix   <=(cmp_lteq)    8   left    bool      string,string       STR_LE  ; direct
infix   <=(cmp_lteq)    8   left    bool      integer,integer             ; direct
infix   <=(cmp_lteq)    8   left    bool      long,long                   ; direct
infix   <=(cmp_lteq)    8   left    bool      integer64,integer64         ; direct
infix   <=(cmp_lteq)    8   left    bool      single,single               ; direct
infix   <=(cmp_lteq)    8   left    bool      double,double               ; direct
infix   <=(cmp_lteq)    8   left    bool      quad,quad                   ; direct
infix   >=(cmp_gteq)    8   left    bool      string,string       STR_GE  ; direct
infix   >=(cmp_gteq)    8   left    bool      integer,integer             ; direct
infix   >=(cmp_gteq)    8   left    bool      long,long                   ; direct
infix   >=(cmp_gteq)    8   left    bool      integer64,integer64         ; direct
infix   >=(cmp_gteq)    8   left    bool      single,single               ; direct
infix   >=(cmp_gteq)    8   left    bool      double,double               ; direct
infix   >=(cmp_gteq)    8   left    bool      quad,quad                   ; direct
infix   +(plus)         9   left    string    string,string       STR_ADD ; direct
infix   +(plus)         9   left    integer   integer,integer             ; direct
infix   +(plus)         9   left    long      long,long                   ; direct
infix   +(plus)         9   left    integer64 integer64,integer64         ; direct
infix   +(plus)         9   left    single    single,single               ; direct
infix   +(plus)         9   left    double    double,double               ; direct
infix   +(plus)         9   left    quad      quad,quad                   ; direct
infix   -(dash)         9   left    integer   integer,integer             ; direct
infix   -(dash)         9   left    long      long,long                   ; direct
infix   -(dash)         9   left    integer64 integer64,integer64         ; direct
infix   -(dash)         9   left    single    single,single               ; direct
infix   -(dash)         9   left    double    double,double               ; direct
infix   -(dash)         9   left    quad      quad,quad                   ; direct
infix   mod             10  left    integer   integer,integer
infix   mod             10  left    long      long,long
infix   mod             10  left    integer64 integer64,integer64
infix   \(backslash)    11  left    integer   integer,integer             ; direct
infix   \(backslash)    11  left    long      long,long                   ; direct
infix   \(backslash)    11  left    integer64 integer64,integer64         ; direct
infix   *(star)         12  left    long      integer,integer             ; direct
infix   *(star)         12  left    integer64 long,long                   ; direct
infix   *(star)         12  left    quad      integer64,integer64         ; direct
infix   *(star)         12  left    single    single,single               ; direct
infix   *(star)         12  left    double    double,double               ; direct
infix   *(star)         12  left    quad      quad,quad                   ; direct
infix   /(slash)        12  left    single    single,single               ; direct
infix   /(slash)        12  left    double    double,double               ; direct
infix   /(slash)        12  left    quad      quad,quad                   ; direct
prefix  negative        13          integer   integer                     ; internal
prefix  negative        13          long      long                        ; internal
prefix  negative        13          integer64 integer64                   ; internal
prefix  negative        13          single    single                      ; internal
prefix  negative        13          double    double                      ; internal
prefix  negative        13          quad      quad                        ; internal
infix   ^(power)        14  left    single    single,single               ; direct
infix   ^(power)        14  left    double    double,double               ; direct
infix   ^(power)        14  left    quad      quad,quad                   ; direct

# Basic language constructs
generic as
generic const
generic goto
generic exit

generic if
generic then
generic else
generic elseif

generic do
generic loop
generic until
generic while
generic wend

generic for
generic to
generic step
generic next

generic select
generic case
generic is

generic type
generic sub
generic function
generic declare

generic redim
generic shared
generic _preserve
generic static

generic _explicit
generic _explicitarray

generic byref
generic byval
generic call

# String helpers
function string_assign      string  string  string_assign     ; internal
function string_maybe_free  none    string  string_maybe_free ; internal


# functions with return type none are subs
function abs            integer   integer
function abs            long      long
function abs            integer64 integer64
function abs            single    single
function abs            double    double
function abs            quad      quad
# absolute
# access
# alias
function asc            integer   string,integer64?
function _atan2         single    single,single
function _atan2         double    double,double
function _atan2         quad      quad,quad
function atn            single    single
function atn            double    double
function atn            quad      quad
function _autodisplay   none

function beep           none
function _blue32        long      long
# bload
# bsave
# calls
function cdbl           double    double
# chain
function chdir          none      string
function chr            string    integer
function cint           integer   integer
function circle         none      "step?,'oparen,single,single,'cparen,single,long?,single?,single?,single?
# clear
function clng           long      long
function close          none      %long?
function cls            none      integer?,long?
function color          none      long?,long?
function command        string    integer?
function _commandcount  long
# common
function cos            single    single
function cos            double    double
function cos            quad      quad
function csng           single    single
function csrlin         integer
function cvd            double    string
function cvdmbf         double    string
function cvi            single    string
function cvl            long      string
function cvs            single    string
function cvsmbf         single    string

# data
function date           string
# def seg
generic _define
generic defint
generic deflng
generic defsng
generic defdbl
generic defstr
function _deflate       string    string
function _delay         none      single
function _dest          none      long
function _dest          long
function dim            integer   any_array
function _display       none
function draw           none      string

function end            none      integer?  END
function environ        string    integer
function environ        string    string
function eof            long      long
function erase          none      @any_array
# erdev
# erl
# err
# error
function exp            single    single
function exp            double    double
function exp            quad      quad

# field
# fileattr
function files          none      string?
function fix            single    single
function fix            double    double
function fix            quad      quad
function _fontheight    integer   long?
function _fontwidth     integer   long?
# fre
function freefile       long

function get            none      %long,integer64?,@string?
function get            none      %long,integer64?,@integer?
function get            none      %long,integer64?,@long?
function get            none      %long,integer64?,@integer64?
function get            none      %long,integer64?,@single?
function get            none      %long,integer64?,@double?
function get            none      %long,integer64?,@quad?
function get            none      "step?,'oparen,single,single,'cparen,'dash,"step?,'oparen,single,single,'cparen,@any_array,long?
function _green32       long      long
# gosub

function _height        long      long?
function hex            string    integer64

function _inflate       string    string
function inkey          string
# inp
function input          none      list
function input          string    integer64,%long?
function instr          integer64 string,string
function instr          integer64 integer64,string,string
function int            single    single
function int            double    double
function int            quad      quad
# interrupt

# key
function _keyclear      none
function _keydown       integer   long
function _keyhit        long
function kill           none      string

function lbound         integer64 any_array,integer?
function lcase          string    string
function left           string    string,long
function len            integer64 string
function len            integer64 @integer
function len            integer64 @long
function len            integer64 @integer64
function len            integer64 @single
function len            integer64 @double
function len            integer64 @quad
# let
function _limit         none      long
function line           none      'dash,"step?,'oparen,single,single,'cparen,long,$b|bf?,long?
function line           none      "step?,'oparen,single,single,'cparen,'dash,"step?,'oparen,single,single,'cparen,long,$b|bf?,long?
generic lineinput
# loc
function _loadimage     long      string,long?
function locate         none      integer?,integer?,integer?
function locate         none      integer?,integer?,integer?,integer,integer
# lock
function lof            integer64 %long
function log            single    single
function log            double    double
function log            quad      quad
# lpos
# lprint
# lset
function ltrim          string    string


function mid            string    string,integer64,integer64?
# mkd
# mkdir
# mkdmbf
# mki
# mkl
# mks
# mksmbf
function _mousebutton   integer   integer
function _mouseinput    integer
function _mousemovementx integer
function _mousemovementy integer
function _mousewheel    integer
function _mousex        integer
function _mousey        integer

# name
function _newimage      long      long,long,long?

# oct
# off
# on com|error|key|pen|play|strig|timer|uevent|gosub
function open           none      string,'for,$random|input|output|binary|append,'as,%long,'len?,'equals?,long?
function option         long      @any
# out

function paint          none      "step?,'oparen,single,single,'cparen,long,long?
# palette
# pcopy
# Currently peek returns quad because that is the interpreter's native word size.
# The variant is only needed because the interpreter distinguishes string and
# numeric storage.
function peek           quad      long
function _peekstr       string    long
# pen
function _pi            double    single?
function play           none      string
# pmap
function point          long      single,single
function point          single    integer
function poke           none      long,quad
function poke           none      long,string
# pos
# preset
function print          none      string
function print          none      integer
function print          none      long
function print          none      integer64
function print          none      single
function print          none      double
function print          none      quad
function _printstring   none      'oparen,single,single,'cparen,string,long?
function _printwidth    long      string,long?
function pset           none      "step?,'oparen,single,single,'cparen,long?
function put            none      %long,integer64?,string?
function put            none      %long,integer64?,integer?
function put            none      %long,integer64?,long?
function put            none      %long,integer64?,integer64?
function put            none      %long,integer64?,single?
function put            none      %long,integer64?,double?
function put            none      %long,integer64?,quad?
#put graphics
# put
# Unforunately _putimage is just too complicated to express as a regular command so
# it has a custom parser.
function _putimage      none      flags,single,single,single,single,long,long,single,single,single,single

function randomize      none      double?
function randomize      none      "using,double
# read
function _red32         long      long
# redim
# reset
# restore
# resume
# return
function _rgb           long      integer,integer,integer,long?
function _rgb32         long      integer
function _rgb32         long      integer,integer
function _rgb32         long      integer,integer,integer
function _rgb32         long      integer,integer,integer,integer
function right          string    string,long
function rmdir          none      string
function rnd            single    single?
# rset
function rtrim          string    string
# run

# sadd
function screen         none      long,integer?,integer?,integer?
# seek
# setmem
function sgn            integer   integer
function sgn            integer   long
function sgn            integer   integer64
function sgn            integer   single
function sgn            integer   double
function sgn            integer   quad
# shell
# signal
function sin            single    single
function sin            double    double
function sin            quad      quad
function sleep          none      long?
generic  _smooth
function sound          none      double,double
function _source        none      long
function _source        long
function space          string    long    
# spc
function sqr            single    single
function sqr            double    double
function sqr            quad      quad
# stick
# stop
function str            string    integer
function str            string    long
function str            string    integer64
function str            string    single
function str            string    double
function str            string    quad
function _strcmp        integer   string,string
function _stricmp       integer   string,string
# strig
# string
function swap           none      @any,@any
function system         none      integer?

# tab
function tan            single    single
function tan            double    double
function tan            quad      quad
function time           string
function timer          double    single?
function _title         none      string
function _title         string
function _trim          string    string
# type

function ubound         integer64 any_array,integer?
function ucase          string    string
# uevent
# unlock
generic using

function val            quad      string
function varptr         long      @any
# varseg
# view

# wait
# width
function _width         long      long?
# window
# write
