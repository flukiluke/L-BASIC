'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'input.bm - Parse rules for INPUT statement

'Expects: TOK_INPUT or TOK_LINEINPUT
'Results: token after input variables
'Format: INPUT[;]["prompt"{;|,}]variablelist
'or LINE INPUT[;]["prompt"{;|,}]variable$
function ps_stmt_input
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start stmt input"
    $end if
    root = ast_add_node(AST_CALL)
    root->ref = TOK_INPUT
    root->ref2 = TOK_INPUT->sig
    flags = ast_add_node(AST_FLAGS)
    flags->ref = AST_FLAG_MANUAL
    root->attach(flags)
    flags->ref2 = 0
    if ps_consumed(TOK_LINEINPUT) then
        flags->ref2 = flags->ref2 OR STMT_INPUT_LINEMODE
        linemode = TRUE
    end if
    ps_consume TOK_INPUT

    if ps_consumed(TOK_SEMICOLON) then
        flags->ref2 = STMT_INPUT_NO_NEWLINE
    end if

    'The prompt must be a literal string, no expressions. Crazy, right?
    if tok_token = TOK_STRINGLIT then
        prompt = ast_add_node(AST_CONSTANT)
        prompt->ref = ast_add_constant(tok_token, tok_content$, TYPE_STRINGLIT)
        flags->ref2 = flags->ref2 OR STMT_INPUT_PROMPT
        root->attach(prompt)
        ps_consume TOK_STRINGLIT
        if tok_token = TOK_COMMA then
            flags->ref2 = flags->ref2 OR STMT_INPUT_NO_QUESTION
            ps_consume TOK_COMMA
        else
            ps_consume TOK_SEMICOLON
        end if
        'It turns out INPUT and LINE INPUT interpret the {;|,} with exactly opposite
        'meaning
        if linemode then
            flags->ref2 = flags->ref2 XOR STMT_INPUT_NO_QUESTION
        end if
    end if

    if linemode then
        var = ps_lvalue_mutable
        if type_of_lvalue(var) <> TYPE_STRING then ps_error "Variable must be a string"
        root->attach(var)
    else
        do
            var = ps_lvalue_mutable
            root->attach(var)
        loop while ps_consumed(TOK_COMMA)
    end if

    ps_stmt_input = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed stmt input"
    $end if
end function
