rootname llvm

lib libLLVM-14
    sub      llvm_initialize_x86_target alias LLVMInitializeX86Target
    sub      llvm_initialize_x86_asm_printer alias LLVMInitializeX86AsmPrinter
    sub      llvm_initialize_x86_target_mc alias LLVMInitializeX86TargetMC
    sub      llvm_initialize_x86_target_info alias LLVMInitializeX86TargetInfo
    function LLVMGetDefaultTargetTriple%&
    function LLVMGetTargetFromTriple&(Triple$, Target%&, ErrorMessage%&)
    function LLVMCreateTargetMachine%&(byval T%&, Triple$, CPU$, Features$, byval Level&, byval Reloc&, byval CodeModel&)
    function llvm_create_target_data_layout%& alias LLVMCreateTargetDataLayout(byval T%&)
    sub      llvm_module_set_data_layout alias LLVMSetModuleDataLayout(byval M%&, byval DL%&)
    function llvm_get_module_data_layout%& alias LLVMGetModuleDataLayout(byval M%&)
    function LLVMTargetMachineEmitToFile&(byval T%&, byval M%&, Filename$, byval codegen&, ErrorMessage%&)
    function LLVMTargetMachineEmitToMemoryBuffer&(byval T%&, byval M%&, byval codegen&, ErrorMessage%&, OutMemBuf%&)
    function llvm_offset_of_element& alias LLVMOffsetOfElement(byval TD%&, byval StructTy%&, byval Element~&)
    function LLVMWriteBitcodeToFile&(byval M%&, Path$)
    function LLVMVerifyModule&(byval M%&, byval Action&, OutMessage%&)
    function llvm_verify_function& alias LLVMVerifyFunction(byval Fn%&, byval Action&)
    function LLVMCreateBinary%&(byval MemBuf%&, byval Context%&, ErrorMessage%&)
    function llvm_binary_get_type& alias LLVMBinaryGetType(byval BR%&)
    sub      llvm_dispose_binary alias LLVMDisposeBinary(byval BR%&)
    function LLVMModuleCreateWithName%&(ModuleID$)
    sub      llvm_dispose_module alias LLVMDisposeModule(byval M%&)
    sub      LLVMSetTarget(byval M%&, Triple$)
    function llvm_int1_type%& alias LLVMInt1Type
    function llvm_int8_type%& alias LLVMInt8Type
    function llvm_int16_type%& alias LLVMInt16Type
    function llvm_int32_type%& alias LLVMInt32Type
    function llvm_int64_type%& alias LLVMInt64Type
    function llvm_float_type%& alias LLVMFloatType
    function llvm_double_type%& alias LLVMDoubleType
    function llvm_fp128_type%& alias LLVMFP128Type
    function llvm_pointer_type%& alias LLVMPointerType(byval ElementType%&, byval AddressSpace~&)
    function llvm_array_type%& alias LLVMArrayType(byval ElementType%&, byval ElementCount~&)
    function llvm_void_type%& alias LLVMVoidType
    function llvm_const_pointer_null%& alias LLVMConstPointerNull(byval Ty%&)
    function LLVMFunctionType%&(byval ReturnType%&, byval ParamTypes%&, byval ParamCount~&, byval IsVarArg&)
    function LLVMAddFunction%&(byval M%&, Name$, byval FunctionTy%&)
    function LLVMAppendBasicBlock%&(byval Fn%&, Name$)
    function llvm_create_builder%& alias LLVMCreateBuilder
    sub      llvm_position_builder_before alias LLVMPositionBuilderBefore(byval Builder%&, byval Instruction%&)
    sub      llvm_position_builder_at_end alias LLVMPositionBuilderAtEnd(byval Builder%&, byval Block%&)
    function llvm_get_basic_block_terminator%& alias LLVMGetBasicBlockTerminator(byval BB%&)
    function llvm_build_ret%& alias LLVMBuildRet(byval B%&, byval V%&)
    function llvm_build_ret_void%& alias LLVMBuildRetVoid(byval B%&)
    function llvm_get_param%& alias LLVMGetParam(byval Fn%&, byval index~&)
    sub      LLVMDisposeMessage(byval Message%&)
    sub      LLVMSetValueName2(byval Value%&, Name$, byval NameLen&)
    sub      llvm_dispose_builder alias LLVMDisposeBuilder(byval Builder%&)
    function LLVMBuildAlloca%&(byval B%&, byval Ty%&, Name$)
    function LLVMBuildCall%&(byval B%&, byval Fn%&, byval Args%&, byval NumArgs~&, Name$)
    function llvm_const_int%& alias LLVMConstInt(byval IntTy%&, byval N~&&, byval SignExtend&)
    function llvm_const_real%& alias LLVMConstReal(byval RealTy%&, byval N#)
    function LLVMConstIntOfStringAndSize%&(byval Ty%&, Text$, byval SLen~&, byval Radix~%%)
    function LLVMConstInBoundsGEP%&(byval ConstantVal%&, byval ConstantIndices%&, byval NumIndices~&)
    function LLVMBuildLoad%&(byval B%&, byval PointerVal%&, Name$)
    function llvm_build_store%& alias LLVMBuildStore(byval B%&, byval Val%&, byval Ptr%&)
    function LLVMBuildCast%&(byval B%&, byval Op&, byval Value%&, byval DestTy%&, Name$)
    function LLVMBuildAdd%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildFAdd%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildSub%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildFSub%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildICmp%&(byval B%&, byval Op&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildFCmp%&(byval B%&, byval Op&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildMul%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildFMul%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildSDiv%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function LLVMBuildFDiv%&(byval B%&, byval LHS%&, byval RHS%&, Name$)
    function llvm_get_insert_block%& alias LLVMGetInsertBlock(byval B%&)
    function llvm_get_basic_block_parent%& alias LLVMGetBasicBlockParent(byval BB%&)
    function llvm_get_global_context%& alias LLVMGetGlobalContext
    function llvm_get_entry_basic_block%& alias LLVMGetEntryBasicBlock(byval Fn%&)
    function LLVMCreateBasicBlockInContext%&(byval C%&, Name$)
    function llvm_build_cond_br%& alias LLVMBuildCondBr(byval B%&, byval Cond%&, byval ThenBr%&, byval ElseBr%&)
    function llvm_build_br%& alias LLVMBuildBr(byval B%&, byval Dest%&)
    sub      llvm_append_existing_basic_block alias LLVMAppendExistingBasicBlock(byval Fn%&, byval BB%&)
    sub      llvm_set_linkage alias LLVMSetLinkage(byval Global%&, byval Linkage&)
    function llvm_get_buffer_start%& alias LLVMGetBufferStart(byval MemBuf%&)
    function llvm_get_buffer_size&& alias LLVMGetBufferSize(byval MemBuf%&)
    sub      llvm_dispose_memory_buffer alias LLVMDisposeMemoryBuffer(byval MemBuf%&)
    function llvm_const_string%& alias LLVMConstString(s$, byval length~&, byval DontNullTerminate&)
    sub      llvm_dump_type alias LLVMDumpType(byval Value%&)
    function LLVMAddGlobal%&(byval M%&, byval Ty%&, Name$)
    sub      llvm_set_initializer alias LLVMSetInitializer(byval GlobalVar%&, byval ConstantVal%&)
    function llvm_type_of%& alias LLVMTypeOf(byval V%&)
    sub      llvm_set_global_constant alias LLVMSetGlobalConstant(byval GlobalVar%&, byval IsConstant&)
    sub      llvm_set_unnamed_address alias LLVMSetUnnamedAddress(byval Global%&, byval UnnamedAddr&)
    function LLVMStructType%&(byval ElementTypes%&, byval ElementCount~&, byval Packed&)
    function llvm_get_type_kind& alias LLVMGetTypeKind(byval Ty%&)
endlib

enum
LLVMAbortProcessAction
LLVMPrintMessageAction
LLVMReturnStatusAction
endenum

enum 30
LLVMTrunc
LLVMZExt
LLVMSExt
LLVMFPToUI
LLVMFPToSI
LLVMUIToFP
LLVMSIToFP
LLVMFPTrunc
LLVMFPExt
LLVMPtrToInt
LLVMIntToPtr
LLVMBitCast
endenum

enum 60
LLVMAddrSpaceCast
endenum

enum 32
LLVMIntEQ equal
LLVMIntNE not equal
LLVMIntUGT unsigned greater than
LLVMIntUGE unsigned greater or equal
LLVMIntULT unsigned less than
LLVMIntULE unsigned less or equal
LLVMIntSGT signed greater than
LLVMIntSGE signed greater or equal
LLVMIntSLT signed less than
LLVMIntSLE signed less or equal
endenum

enum
LLVMRealPredicateFalse Always false (always folded)
LLVMRealOEQ True if ordered and equal
LLVMRealOGT True if ordered and greater than
LLVMRealOGE True if ordered and greater than or equal
LLVMRealOLT True if ordered and less than
LLVMRealOLE True if ordered and less than or equal
LLVMRealONE True if ordered and operands are unequal
LLVMRealORD True if ordered (no nans)
LLVMRealUNO True if unordered: isnan(X) | isnan(Y)
LLVMRealUEQ True if unordered or equal
LLVMRealUGT True if unordered or greater than
LLVMRealUGE True if unordered, greater than, or equal
LLVMRealULT True if unordered or less than
LLVMRealULE True if unordered, less than, or equal
LLVMRealUNE True if unordered or not equal
LLVMRealPredicateTrue Always true (always folded)
endenum

enum
LLVMExternalLinkage Externally visible function
LLVMAvailableExternallyLinkage
LLVMLinkOnceAnyLinkage Keep one copy of function when linking (inline)*/
LLVMLinkOnceODRLinkage Same, but only replaced by something equivalent.
LLVMLinkOnceODRAutoHideLinkage Obsolete
LLVMWeakAnyLinkage Keep one copy of function when linking (weak)
LLVMWeakODRLinkage Same, but only replaced by something equivalent.
LLVMAppendingLinkage Special purpose, only applies to global arrays
LLVMInternalLinkage Rename collisions when linking (static functions)
LLVMPrivateLinkage Like Internal, but omit from symbol table
LLVMDLLImportLinkage Obsolete
LLVMDLLExportLinkage Obsolete
LLVMExternalWeakLinkage ExternalWeak linkage description
LLVMGhostLinkage Obsolete
LLVMCommonLinkage Tentative definitions
LLVMLinkerPrivateLinkage Like Private, but linker removes.
LLVMLinkerPrivateWeakLinkage Like LinkerPrivate, but is weak.
endenum

enum
LLVMCodeGenLevelNone
LLVMCodeGenLevelLess
LLVMCodeGenLevelDefault
LLVMCodeGenLevelAggressive
endenum

enum
LLVMRelocDefault 
LLVMRelocStatic 
LLVMRelocPIC 
LLVMRelocDynamicNoPic 
LLVMRelocROPI 
LLVMRelocRWPI 
LLVMRelocROPI_RWPI 
endenum

enum
LLVMCodeModelDefault 
LLVMCodeModelJITDefault 
LLVMCodeModelTiny 
LLVMCodeModelSmall 
LLVMCodeModelKernel 
LLVMCodeModelMedium 
LLVMCodeModelLarge 
endenum

enum
LLVMAssemblyFile 
LLVMObjectFile 
endenum

enum
LLVMNoUnnamedAddr Address of the GV is significant.
LLVMLocalUnnamedAddr Address of the GV is locally insignificant.
LLVMGlobalUnnamedAddr Address of the GV is globally insignificant.
endenum

enum
LLVMVoidTypeKind type with no size
LLVMHalfTypeKind 16 bit floating point type
LLVMFloatTypeKind 32 bit floating point type
LLVMDoubleTypeKind 64 bit floating point type
LLVMX86_FP80TypeKind 80 bit floating point type (X87)
LLVMFP128TypeKind 128 bit floating point type (112-bit mantissa)
LLVMPPC_FP128TypeKind = 6'128 bit floating point type (two 64-bits)
LLVMLabelTypeKind Labels
LLVMIntegerTypeKind Arbitrary bit width integers
LLVMFunctionTypeKind Functions
LLVMStructTypeKind Structures
LLVMArrayTypeKind Arrays
LLVMPointerTypeKind Pointers
LLVMVectorTypeKind Fixed width SIMD vector type
LLVMMetadataTypeKind Metadata
LLVMX86_MMXTypeKind X86 MMX
LLVMTokenTypeKind Tokens
LLVMScalableVectorTypeKind Scalable SIMD vector type
LLVMBFloatTypeKind 16 bit brain floating point type
LLVMX86_AMXTypeKind X86 AMX
endenum


