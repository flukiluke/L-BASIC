'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'llvm_bindings.bm - Bindings for LLVM C API functions, wrappers

function llvm_module_create_with_name%&(ModuleID$)
    llvm_module_create_with_name%& = LLVMModuleCreateWithName(ModuleID$ + chr$(0))
end function

sub llvm_set_target(M%&, Triple$)
    LLVMSetTarget M%&, Triple$ + chr$(0)
end sub

function llvm_function_type%&(ReturnType%&, ParamTypes%&(), ParamCount~&, IsVarArg&)
    llvm_function_type%& = LLVMFunctionType(ReturnType%&, _offset(ParamTypes%&()), ParamCount~&, IsVarArg&)
end function

function llvm_add_function%&(M%&, Name$, FunctionTy%&)
    llvm_add_function%& = LLVMAddFunction%&(M%&, Name$ + chr$(0), FunctionTy%&)
end function

function llvm_append_basic_block%&(Fn%&, Name$)
    llvm_append_basic_block%& = LLVMAppendBasicBlock%&(Fn%&, Name$ + chr$(0))
end function

function llvm_verify_module(M%&, Action&, OutMessage$)
    llvm_verify_module = LLVMVerifyModule(M%&, Action&, msgp%&)
    OutMessage$ = llvm_recv_string$(msgp%&)
end function

function llvm_recv_string$(msgp%&)
    if msgp%& = 0 then exit function
    'Is there a better way?
    msg$ = ""
    p%& = msgp%&
    $checking:off
    dim m as _mem
    do
        c& = _memget(m, p%&, _byte)
        if c& = 0 then exit do
        msg$ = msg$ + chr$(c&)
        p%& = p%& + 1
    loop
    $checking:on
    LLVMDisposeMessage msgp%&
    llvm_recv_string$ = msg$
end function

function llvm_write_bitcode_to_file&(M%&, Path$)
    llvm_write_bitcode_to_file& = LLVMWriteBitcodeToFile(M%&, Path$ + chr$(0))
end function

sub llvm_set_value_name(Value%&, Name$)
    LLVMSetValueName2 Value%&, Name$, len(Name$)
end sub

function llvm_build_alloca%&(B%&, Ty%&, Name$)
    llvm_build_alloca%& = LLVMBuildAlloca(B%&, Ty%&, Name$ + chr$(0))
end function

function llvm_build_call%&(B%&, Fn%&, Args%&(), NumArgs~&, Name$)
    llvm_build_call = LLVMBuildCall(B%&, Fn%&, _offset(Args%&()), NumArgs~&, Name$ + chr$(0))
end function

function llvm_const_int_of_string%&(Ty%&, Text$, Radix~%%)
    llvm_const_int_of_string%& = LLVMConstIntOfStringAndSize%&(Ty%&, Text$ + chr$(0), len(Text$), Radix~%%)
end function

function llvm_const_real_of_string%&(RealTy%&, Text$)
    llvm_const_real_of_string%& = LLVMConstRealOfStringAndSize%&(RealTy%&, Text$ + chr$(0), len(Text$))
end function

function llvm_build_load%&(B%&, PointerVal%&, Name$)
    llvm_build_load%& = LLVMBuildLoad%&(B%&, PointerVal%&, Name$ + chr$(0))
end function

function llvm_build_cast%&(B%&, Op&, Value%&, DestTy%&, Name$)
    llvm_build_cast%& = LLVMBuildCast%&(B%&, Op&, Value%&, DestTy%&, Name$ + chr$(0))
end function

function llvm_build_add%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_add%& = LLVMBuildAdd%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_fadd%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_fadd%& = LLVMBuildFAdd%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_sub%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_sub%& = LLVMBuildSub%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_fsub%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_fsub%& = LLVMBuildFSub%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_mul%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_mul%& = LLVMBuildMul%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_fmul%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_fmul%& = LLVMBuildFMul%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_sdiv%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_sdiv%& = LLVMBuildSDiv%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_fdiv%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_fdiv%& = LLVMBuildFDiv%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_srem%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_srem%& = LLVMBuildSRem%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_and%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_and%& = LLVMBuildAnd%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_or%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_or%& = LLVMBuildOr%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_xor%&(B%&, LHS%&, RHS%&, Name$)
    llvm_build_xor%& = LLVMBuildXor%&(B%&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_not%&(B%&, V%&, Name$)
    llvm_build_not%& = LLVMBuildNot%&(B%&, V%&, Name$ + chr$(0))
end function

function llvm_build_neg%&(B%&, V%&, Name$)
    llvm_build_neg%& = LLVMBuildNeg%&(B%&, V%&, Name$ + chr$(0))
end function

function llvm_build_fneg%&(B%&, V%&, Name$)
    llvm_build_fneg%& = LLVMBuildFNeg%&(B%&, V%&, Name$ + chr$(0))
end function

function llvm_build_icmp%&(B%&, Op&, LHS%&, RHS%&, Name$)
    llvm_build_icmp%& = LLVMBuildICmp%&(B%&, Op&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_build_fcmp%&(B%&, Op&, LHS%&, RHS%&, Name$)
    llvm_build_fcmp%& = LLVMBuildFCmp%&(B%&, Op&, LHS%&, RHS%&, Name$ + chr$(0))
end function

function llvm_create_basic_block%&(Name$)
    llvm_create_basic_block%& = LLVMCreateBasicBlockInContext%&(llvm_get_global_context%&, Name$ + chr$(0))
end function

function llvm_get_default_target_triple$
    msgp%& = LLVMGetDefaultTargetTriple%&
    llvm_get_default_target_triple$ = llvm_recv_string$(msgp%&)
end function

function llvm_get_target_from_triple%&(Triple$, ErrorMsg$)
    e = LLVMGetTargetFromTriple&(Triple$ + chr$(0), Target%&, ErrorMessage%&)
    if ErrorMessage%& then ErrorMsg$ = llvm_recv_string$(ErrorMessage%&)
    if e = 0 then
        llvm_get_target_from_triple%& = Target%&
    else
        llvm_get_target_from_triple%& = 0
    end if
end function

function llvm_create_target_machine%&(T%&, Triple$, CPU$, Features$, Level&, Reloc&, CodeModel&)
    llvm_create_target_machine%& = LLVMCreateTargetMachine%&(T%&, Triple$ + chr$(0), CPU$ + chr$(0), Features$ + chr$(0), Level&, Reloc&, CodeModel&)
end function

function llvm_target_machine_emit_to_file&(T%&, M%&, Filename$, codegen&, ErrorMsg$)
    llvm_target_machine_emit_to_file& = LLVMTargetMachineEmitToFile(T%&, M%&, Filename$ + chr$(0), codegen&, msgp%&)
    ErrorMsg$ = llvm_recv_string$(msgp%&)
end function

'The real name of this function is longer than the 40 character limit!
function llvm_target_machine_emit_to_memory_buf&(T%&, M%&, codegen&, ErrorMsg$, OutMemBuf%&)
    llvm_target_machine_emit_to_memory_buf& = LLVMTargetMachineEmitToMemoryBuffer(T%&, M%&, codegen&, msgp%&, OutMemBuf%&)
    ErrorMsg$ = llvm_recv_string$(msgp%&)
end function

function llvm_const_in_bounds_gep%&(ConstantVal%&, ConstantIndices%&(), NumIndices~&)
    llvm_const_in_bounds_gep%& = LLVMConstInBoundsGEP(ConstantVal%&, _offset(ConstantIndices%&()), NumIndices~&)
end function

function llvm_add_global%&(M%&, Ty%&, n$)
    llvm_add_global%& = LLVMAddGlobal(M%&, Ty%&, n$ + chr$(0))
end function

function llvm_struct_type%&(ElementTypes%&(), ElementCount~&, Packed&)
    llvm_struct_type%& = LLVMStructType(_offset(ElementTypes%&()), ElementCount~&, Packed&)
end function

function llvm_create_binary%&(MemBuf%&, Context%&, ErrorMessage$)
    llvm_create_binary%& = LLVMCreateBinary%&(MemBuf%&, Context%&, msgp%&)
    ErrorMessage$ = llvm_recv_string$(msgp%&)
end function
