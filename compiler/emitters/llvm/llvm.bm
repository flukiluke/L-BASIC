'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'llvm.bm - Entry point for LLVM based compilation

sub ll_build
    ll_cg_state.module = llvm_module_create_with_name(options.mainarg)
    ll_set_target
    for i = 1 to ast_last_procedure
        root = ast_procedures(i)
        ll_cg_procedure_entry root
    next i
    for i = 1 to ast_last_procedure
        root = ast_procedures(i)
        ll_cg_procedure root
    next i
    e = llvm_verify_module(ll_cg_state.module, LLVMAbortProcessAction, message$)
    if options.build_stages and BUILD_LINK then
        ll_do_link
    elseif options.build_stages and BUILD_OBJ then
        ll_emit_obj
    elseif options.build_stages and BUILD_ASM then
        ll_emit_asm
    elseif options.build_stages and BUILD_IR then
        ll_emit_ir
    end if
    llvm_dispose_module ll_cg_state.module
end sub

sub ll_emit_ir
    e = llvm_write_bitcode_to_file(ll_cg_state.module, options.outputfile)
    if e then ll_error "Failed to write to " + options.outputfile
end sub

sub ll_emit_asm
    e = llvm_target_machine_emit_to_file(ll_cg_state.target_machine, ll_cg_state.module, options.outputfile, LLVMAssemblyFile, message$)
    if e then ll_error message$
end sub

sub ll_emit_obj
    e = llvm_target_machine_emit_to_file(ll_cg_state.target_machine, ll_cg_state.module, options.outputfile, LLVMObjectFile, message$)
    if e then ll_error message$
end sub

sub ll_do_link
    'First, write our module to disk as an object file
    dim as _offset obj_buf
    e = llvm_target_machine_emit_to_memory_buf(ll_cg_state.target_machine, ll_cg_state.module, LLVMObjectFile, message$, obj_buf)
    if e then ll_error message$
    module_obj$ = ll_write_tempfile$(".o", llvm_get_buffer_start(obj_buf), llvm_get_buffer_size(obj_buf))

    'Locate our foundation library
    foundation_lib$ = runtime_platform_settings.rtlib_dir + "/foundation.a"

    'Core library
    core_lib$ = runtime_platform_settings.rtlib_dir + "/core.a"

    'Locate our linker
    linker$ = runtime_platform_settings.linker
    link_opts$ = runtime_platform_settings.link_opts

    'Do it!
    cmd$ = shell_protect$(linker$) _
            + " " + link_opts$ _
            + " " + shell_protect$(module_obj$) _
            + " " + shell_protect$(core_lib$) _
            + " " + shell_protect$(foundation_lib$) _
            + " -g -no-pie" _
            + " -o " + shell_protect$(options.outputfile)
    shell cmd$

    'Clean up
    kill module_obj$
end sub

sub ll_set_target
    dim as _offset target, layout
    llvm_initialize_x86_target_info
    llvm_initialize_x86_target
    llvm_initialize_x86_target_mc
    llvm_initialize_x86_asm_printer
    triple$ = llvm_get_default_target_triple$
    'Get target, i.e. one of `llc --version`
    target = llvm_get_target_from_triple(triple$, errmsg$)
    if target = 0 then ll_error "No target: " + errmsg$
    'Specific processor & additional features from `llc -march=... -mattr=help`
    cpu$ = "generic"
    features$ = ""
    ll_cg_state.target_machine = llvm_create_target_machine(target, triple$, cpu$, features$, LLVMCodeGenLevelNone, LLVMRelocDefault, LLVMCodeModelDefault)
    layout = llvm_create_target_data_layout(ll_cg_state.target_machine)
    llvm_module_set_data_layout ll_cg_state.module, layout
    llvm_set_target ll_cg_state.module, triple$
end sub

sub ll_error(msg$)
    Error_message$ = msg$
    error 101
end sub

$include: 'llvm_bindings.bm'
$include: 'assign.bm'
$include: 'calls.bm'
$include: 'cast.bm'
$include: 'if.bm'
$include: 'proc.bm'
$include: 'stmt_expr.bm'
$include: 'string.bm'
$include: 'tempfile.bm'
$include: 'types.bm'
$include: 'vars.bm'
