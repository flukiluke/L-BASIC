'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'if.bm - Code generation for conditional statements

sub ll_cg_if(node)
    dim as _offset func, guard, cmp, trueBB, falseBB, endBB, dummy

    func = llvm_get_basic_block_parent(llvm_get_insert_block(ll_cg_state.builder))
    endBB = llvm_create_basic_block("if_end")

    'Ignore possible else block as last child for now
    for i = 1 to (ast_num_children(node) \ 2) * 2 step 2
        cond_node = ast_get_child(node, i)
        cond_type = type_of_expr(cond_node)
        guard = ll_cg_expr(cond_node)
        if type_is_int(cond_type) then
            cmp = llvm_build_icmp(ll_cg_state.builder, LLVMIntNE, guard, llvm_const_int(ll_type(cond_type), 0, 0), "ifcmp")
        elseif type_is_fp(cond_type) then
            cmp = llvm_build_fcmp(ll_cg_state.builder, LLVMRealONE, guard, llvm_const_real(ll_type(cond_type), 0), "ifcmp")
        end if
        trueBB = llvm_create_basic_block("if_true")
        falseBB = llvm_create_basic_block("if_false")
        dummy = llvm_build_cond_br(ll_cg_state.builder, cmp, trueBB, falseBB)

        llvm_append_existing_basic_block func, trueBB
        llvm_position_builder_at_end ll_cg_state.builder, trueBB
        ll_cg_block ast_get_child(node, i + 1)
        dummy = llvm_build_br(ll_cg_state.builder, endBB)

        llvm_append_existing_basic_block func, falseBB
        llvm_position_builder_at_end ll_cg_state.builder, falseBB
    next i

    'Now handle optional else block
    if ast_num_children(node) mod 2 = 1 then
        ll_cg_block ast_get_child(node, ast_num_children(node))
    end if
    dummy = llvm_build_br(ll_cg_state.builder, endBB)

    llvm_append_existing_basic_block func, endBB
    llvm_position_builder_at_end ll_cg_state.builder, endBB
end sub
        
'sub ll_cg_if(node)
'    dim as _offset guard, cmp, func, thenBB, elseBB, mergeBB, dummy
'    cond_node = ast_get_child(node, 1)
'    cond_type = type_of_expr(cond_node)
'    guard = ll_cg_expr(cond_node)
'    if type_is_int(cond_type) then
'        cmp = llvm_build_icmp(ll_cg_state.builder, LLVMIntNE, guard, llvm_const_int(ll_type(cond_type), 0, 0), "ifcmp")
'    elseif type_is_fp(cond_type) then
'        cmp = llvm_build_fcmp(ll_cg_state.builder, LLVMRealONE, guard, llvm_const_real(ll_type(cond_type), 0), "ifcmp")
'    end if
'    func = llvm_get_basic_block_parent(llvm_get_insert_block(ll_cg_state.builder))
'    thenBB = llvm_append_basic_block(func, "then")
'    elseBB = llvm_create_basic_block("else")
'    mergeBB = llvm_create_basic_block("endif")
'    dummy = llvm_build_cond_br(ll_cg_state.builder, cmp, thenBB, elseBB)
'    llvm_position_builder_at_end ll_cg_state.builder, thenBB
'    ll_cg_block ast_get_child(node, 2)
'    dummy = llvm_build_br(ll_cg_state.builder, mergeBB)
'    llvm_append_existing_basic_block func, elseBB
'    llvm_position_builder_at_end ll_cg_state.builder, elseBB
'    if ast_num_children(node) = 3 then
'        ll_cg_block ast_get_child(node, 3)
'    end if
'    dummy = llvm_build_br(ll_cg_state.builder, mergeBB)
'    llvm_append_existing_basic_block func, mergeBB
'    llvm_position_builder_at_end ll_cg_state.builder, mergeBB
'end sub


