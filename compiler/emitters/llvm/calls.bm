'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'calls.bm - Code generation for calls to functions

function ll_cg_call%&(func, sig, args() as ll_arg_t)
    dim as _offset builtin
    if sig = -1 then
        sig = func->sig
    end if
    if sig->sig_lp = 0 then
        'A builtin instruction?
        builtin = ll_cg_builtin(func, sig, args())
        if builtin then
            ll_cg_call%& = builtin
            exit function
        end if
        'First use of a non-builtin?
        ll_declare_func_sig func, sig
        if sig->sig_lp = 0 then
            'Still nothing, throw an error (should never happen)
            ll_error "Call to " + func->identifier + " has no target pointer"
        end if
    end if

    numargs = ubound(args)
    dim lps(1 to numargs) as _offset
    for i = 1 to numargs
        typ = type_sig_argtype(sig, i)
        typflags = type_sig_argflags(sig, i)
        if args(i).omitted then
            if typflags AND TYPE_OPTIONAL = 0 then
                ll_error "Attempt to use omitted argument for non-optional parameter"
            else
                'Omitted optional argument
                lps(i) = llvm_const_pointer_null(llvm_pointer_type(ll_type(typ), 0))
            end if
        elseif args(i).is_byval and ((typflags AND TYPE_BYVAL) = 0) then
            'Have a value but need a reference, create a shadow variable
            lps(i) = ll_cg_shadow_expr(typ, args(i).lp)
        elseif not args(i).is_byval and (typflags AND TYPE_BYVAL) then
            'Have a reference but need a value, dereference
            lps(i) = ll_cg_deref_expr(args(i).lp)
        else
            lps(i) = args(i).lp
        end if
    next i

    ll_cg_call%& = llvm_build_call(ll_cg_state.builder, sig->sig_lp, _
                                   lps(), numargs, "")
end function

function ll_cg_call_node%&(node)
    numargs = ast_num_children(node)
    func = node->ref
    sig = node->ref2

    dim args(1 to numargs) as ll_arg_t
    for i = 1 to numargs
        arg_node = ast_get_child(node, i)
        if arg_node->atype = AST_NONE then
            args(i).omitted = TRUE
        else
            args(i).lp = ll_cg_expr(arg_node)
            'll_cg_expr should always evaluate down to a value
            args(i).is_byval = TRUE
            typ = type_of_expr(arg_node)
            if typ = TYPE_STRING and _
                (not type_is_lvalue(arg_node)) and _
                (arg_node->atype <> AST_CONSTANT) then ll_cg_str_queue_transient args(i)
        end if
    next i
    ll_cg_call_node%& = ll_cg_call(func, sig, args())
end function

sub ll_declare_func_sig(func, sig)
    dim as _offset prototype
    numargs = type_sig_numargs(sig)
    dim args(1 to numargs) as _offset
    for i = 1 to numargs
        if type_sig_argflags(sig, i) AND TYPE_BYVAL then
            args(i) = ll_type(type_sig_argtype(sig, i))
        else
            args(i) = ll_pointer_type(type_sig_argtype(sig, i))
        end if
    next i
    prototype = llvm_function_type(ll_type(type_sig_return(sig)), args(), numargs, FALSE)
    if sig->link_name = "" then
        mangled$ = ll_mangled_proc_name$(func->identifier, sig)
    else
        mangled$ = sig->link_name
    end if
    sig->sig_lp = llvm_add_function(ll_cg_state.module, mangled$, prototype)
end sub

function ll_cg_shadow_expr%&(typ, expr as _offset)
    dim as _offset currentBB, entryBB, alloca, dummy
    currentBB = llvm_get_insert_block(ll_cg_state.builder)
    entryBB = llvm_get_entry_basic_block(llvm_get_basic_block_parent(currentBB))
    llvm_position_builder_before ll_cg_state.builder, llvm_get_basic_block_terminator(entryBB)
    alloca = llvm_build_alloca(ll_cg_state.builder, ll_type(typ), "shadow")
    llvm_position_builder_at_end ll_cg_state.builder, currentBB
    dummy = llvm_build_store(ll_cg_state.builder, expr, alloca)
    ll_cg_shadow_expr%& = alloca
end function

function ll_cg_deref_expr%&(lp as _offset)
    ll_cg_deref_expr%& = llvm_build_load(ll_cg_state.builder, lp, "deref")
end function

sub ll_cg_set_return(node)
    dim as _offset value, dummy
    value = ll_cg_expr(ast_get_child(node, 1))
    if type_of_expr(ast_get_child(node, 1)) = TYPE_STRING then
        dummy = ll_cg_str_assign(value, ll_cg_state.retvar)
    else
        dummy = llvm_build_store(ll_cg_state.builder, value, ll_cg_state.retvar)
    end if
end sub

