'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'labels.bm - Parse rule for labels and utility functions for handling them

'Expects: TOK_LINENUM
'Results: next token
'Note: this is for label definitions, not references
sub ps_label
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start label"
    $end if
    id = symtab_get_id(tok_content$)
    if id > 0 and id->stype <> SYM_LABEL then
        ps_error "Label name conflicts with existing identifier"
    elseif id > 0 and id->label_found then
        ps_error "Label already defined"
    elseif id > 0 then
        'This is a label that was only referenced until now; mark it found
        id->label_found = TRUE
    else
        dim symtab_label as symtab_entry_t
        symtab_label.identifier = tok_content$
        symtab_add_entry symtab_label
        id = symtab_last_entry
        id->stype = SYM_LABEL
        id->label_found = TRUE
    end if
    ps_unattached_labels$ = ps_unattached_labels$ + mkl$(id)
    ps_consume TOK_LINENUM
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed label"
    $end if
end sub

'There may have been 0 or more labels since the last statement that produced
'nodes (some non-executable statements may not produce nodes). This attaches
'those labels to a node. It also resolves any jumps to those labels to point
'to the node.
sub ps_attach_labels(node)
    if node > 0 then
        for i = 1 to len(ps_unattached_labels$) step 4
            label_id = cvl(mid$(ps_unattached_labels$, i, 4))
            $if DEBUG_PARSE_TRACE then
            debuginfo "Attached label " + label_id->identifier
            $end if
            label_id->label_node = node
            'Have we resolved an unresolved jump?
            for j = 1 to len(ps_unresolved_jumps$) step 4
                unres_node = cvl(mid$(ps_unresolved_jumps$, j, 4))
                if unres_node->ref = label_id then
                    unres_node->ref = node
                else
                    still_unres$ = still_unres$ + mkl$(unres_node)
                end if
            next j
            ps_unresolved_jumps$ = still_unres$
        next i
        ps_unattached_labels$ = ""
    end if
end sub

'Handles any labels not yet attached by the end of the program, because
'they're trailing empty lines or trailing non-executable statements.
'Also ensures all references point to an existent label.
sub ps_finish_labels(block)
    if len(ps_unattached_labels$) > 0 then
        end_node = ast_add_node(AST_BLOCK)
        block->attach(end_node)
        ps_attach_labels end_node
    end if 
    if len(ps_unresolved_jumps$) then
        $macro: ps_finish_label_name(@@) | symtab(ast_nodes(cvl(mid$(ps_unresolved_jumps$, @1, 4))).ref).identifier
        labels$ = ps_finish_label_name(1)
        for i = 5 to len(ps_unresolved_jumps$) step 4
            labels$ = ", " + ps_finish_label_name(i)
        next i
        ps_error "Undefined label(s): " + labels$
    end if
end sub

