'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'parser.bm - Recursive Descent Parser

function ps_is_linejoin
    ps_is_linejoin = tok_token = TOK_NEWLINE and tok_content$ = ":"
end function
    
sub ps_consume(expected)
    ps_assert expected
    tok_advance
end sub

function ps_consumed(expected)
    if tok_token = expected then
        if tok_token = TOK_NEWLINE and not ps_is_linejoin then ps_actual_linenum = ps_actual_linenum + 1
        tok_advance
        ps_consumed = TRUE
    end if
end function

sub ps_assert(expected)
    if tok_token <> expected then
        if ucase$(tok_human_readable(tok_token)) = ucase$(tok_content$) then
            ps_error "Syntax error: expected " + tok_human_readable(expected) + " got " + tok_human_readable(tok_token)
        else
            ps_error "Syntax error: expected " + tok_human_readable(expected) + " got " + tok_human_readable(tok_token) + " " + chr$(34) + tok_content$ + chr$(34)
        end if
    else
        $if DEBUG_PARSE_TRACE then
        debuginfo "Assert " + tok_human_readable(expected)
        $end if
    end if
    if tok_token = TOK_NEWLINE and not ps_is_linejoin then ps_actual_linenum = ps_actual_linenum + 1
end sub

'Execute this when at the beginning of a line. As well as consuming whitespace,
'it handles the EOI from interactive mode.
sub ps_line_prelude
    do while tok_token = TOK_NEWLINE
        ps_consume TOK_NEWLINE
    loop
    if tok_token = TOK_EOI then
        ps_consume TOK_EOI
    end if
end sub

function ps_is_terminator(t)
    select case t
    case TOK_ELSE, TOK_NEWLINE
        ps_is_terminator = TRUE
    end select
end function

function ps_last_nested(ast_type)
    for i = len(ps_nested_structures$) - 3 to 1 step -4
        if ast_nodes(cvl(mid$(ps_nested_structures$, i, 4))).typ = ast_type then
            ps_last_nested = cvl(mid$(ps_nested_structures$, i, 4))
            exit function
        end if
    next i
end function

function ps_final_nested
    if len(ps_nested_structures$) = 0 then exit function
    ps_final_nested = cvl(right$(ps_nested_structures$, 4))
end function

sub ps_add_nested_structure(node)
    ps_nested_structures$ = ps_nested_structures$ + mkl$(node)
end sub

sub ps_remove_nested_structure
    ps_nested_structures$ = left$(ps_nested_structures$, len(ps_nested_structures$) - 4)
end sub

function ps_scope$
    'Note: global symbols (functions, SHARED vars) have no @ at all
    ps_scope$ = "@" + ps_scope_identifier$ + "@"
end function

function ps_get_scope$(token)
    varname$ = symtab(token).identifier
    if left$(varname$, 1) <> "@" then
        ps_get_scope$ = ""
    else
        ps_get_scope$ = mid$(varname$, 2, instr(2, varname$, "@") - 2)
    end if
end function

sub ps_queue_cleanup(node)
    ps_queued_nodes$ = ps_queued_nodes$ + mkl$(node)
end sub

sub ps_error(msg$)
    Error_message$ = msg$
    error 101
end sub

'Expects: first token in block
'Results: block end marker or IEOF
function ps_block
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start block"
    $end if
    root = ast_add_node(AST_BLOCK)
    do
        do while tok_token = TOK_NEWLINE
            ps_consume TOK_NEWLINE
        loop
        stmt = ps_stmt
        ' -2 -> SUB or FUNCTION definition, continue processing input
        if stmt = -1 then exit do 'use -1 to signal the end of a block
        if stmt > 0 then ast_attach root, stmt '0 means that statement did not generate any ast nodes
    loop
    ps_block = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "End block"
    $end if
end function

'$include: 'array.bm'
'$include: 'assignment.bm'
'$include: 'const.bm'
'$include: 'drawing.bm'
'$include: 'exit.bm'
'$include: 'for.bm'
'$include: 'function.bm'
'$include: 'goto.bm'
'$include: 'if.bm'
'$include: 'input.bm'
'$include: 'labels.bm'
'$include: 'loop.bm'
'$include: 'metacommands.bm'
'$include: 'option.bm'
'$include: 'pratt.bm'
'$include: 'preload.bm'
'$include: 'print.bm'
'$include: 'statement.bm'
'$include: 'tokeng.bm'
'$include: 'udt.bm'
'$include: 'userfuncs.bm'
'$include: 'var.bm'
