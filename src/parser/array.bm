'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'array.bm - Parse rules for array declaration and usage

'Expects: ( or other token
'Results: token after ) or sigil, if present
'This sub produces AST_ARRAY_DELETE and AST_ARRAY_RESIZE operations
'and adds them to the supplied block. It also generates the symtab entries
'for the array itself and its type. This somewhat duplicates the logic in
'parser/userfuncs.bm.
sub ps_dim_array(token, var_name$, sigil, block, is_shared, preserve, is_static)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start dim array"
    $end if
    if token <> TOK_UNKNOWN then existing_array = token

    'This variable is updated as we go; see towards the bottom for a summary.
    destruct = ps_last_nested(AST_PROCEDURE) > 0

    'Note the parentheses may be omitted or empty if the number of dimensions
    'is given in the type.
    if ps_consumed(TOK_OPAREN) then
        if tok_token <> TOK_CPAREN then
            'dims$ will be a series of pairs of AST_EXPR, which are the lower and upper
            'bounds for each dimension.
            do
                dims$ = dims$ + mkl$(ps_expr)
                if ps_consumed(TOK_TO) then
                    dims$ = dims$ + mkl$(ps_expr)
                else
                    'Whoops, there was in implicit lower bound. Add it in.
                    implicit_zero = ast_add_node(AST_CONSTANT)
                    implicit_zero->ref = AST_FALSE
                    dims$ = left$(dims$, len(dims$) - 4) + mkl$(implicit_zero) + right$(dims$, 4)
                end if
            dimensions = dimensions + 1
            loop while ps_consumed(TOK_COMMA)
        end if
        ps_consume TOK_CPAREN
    end if
    'Empty or omitted parentheses mean this array is not concrete; we cannot actually
    'instantiate it.
    if dimensions > 0 then concrete_array = TRUE

    'So far sigil is any type provided before the (), sigil2 is any type given after
    'the ().
    sigil2 = ps_opt_sigil
    if sigil2 > 0 and sigil > 0 then ps_error "Cannot give type twice"
    if sigil2 then sigil = sigil2
    if sigil = 0 then sigil = ps_default_type

    'If the type has a number of dimensions, ensure it matches the bounds if given.
    if type_is_array(sigil) and _
        concrete_array and _
        sigil->array_dims <> 0 and sigil->array_dims <> dimensions then
        ps_error "Number of bounded dimensions does not match number of dimensions in type"
    end if

    'We need to create the array type based on number of bounds if it's not in the type
    if not type_is_array(sigil) then sigil = type_make_array(sigil, dimensions)

    'sigil is now guaranteed to be an array type. Ensure we're not changing the type
    'of an existing array. The exception is that if the existing array has no definite number
    'of dimensions, we can specify any number of dimensions. This is somewhat dangerous, so
    'a safe runtime will want to check this operation.
    if existing_array > 0 then
        existing_typ = existing_array->type
        if existing_typ <> sigil and existing_typ->array_dims <> 0 then
            ps_error "Cannot change array type from " + type_human_readable$(existing_typ) + " to " + type_human_readable$(sigil)
        end if
    end if

    'Now we can create the actual array variable
    dim sym as symtab_entry_t
    if existing_array = 0 then
        if is_shared then
            sym.identifier = ucase$(var_name$)
        else
            sym.identifier = ps_scope$ + ucase$(var_name$)
        end if
        sym-stype = SYM_VARIABLE
        sym-type = sigil
        sym-stack_offset = ps_scope_frame_size
        ps_scope_frame_size = ps_scope_frame_size + type_fixed_size(sym-type)
        if is_static or is_shared then
            sym-vflags = SYM_VARIABLE_MAINFRAME
            destruct = FALSE
        else
            sym-vflags = 0
        end if
        'Because we don't know the size of a descriptor for any-dimensional arrays,
        'they are always a pointer to the descriptor.
        if dimensions = 0 then sym-vflags = sym-vflags OR SYM_VARIABLE_DEREF
        symtab_add_entry sym
        var = symtab_last_entry
    else
        var = existing_array
    end if

    'Used for constructor and destructor
    var_node = ast_add_node(AST_VAR)
    var_node->ref = var

    'Only generate a constructor if we actually know the array size
    if concrete_array then
        if is_static then
            node = ast_add_node(AST_ARRAY_ESTABLISH)
        elseif preserve then
            node = ast_add_node(AST_ARRAY_RESIZE)
        else
            node = ast_add_node(AST_ARRAY_CREATE)
        end if
        node->attach(var_node)
        block->attach(node)
        ast_children(node) = mkl$(var_node) + dims$
    end if

    'Attempt to claim ownership. If the array has just been created this will work,
    'otherwise it's a no-op on already claimed arrays.
    node = ast_add_node(AST_ARRAY_CLAIM)
    node->attach(var_node)
    block->attach(node)

    'Generate an array destructor if:
    ' - we are in a procedure (no need to destruct at program exit), and
    ' - the array is not shared or static
    ' Note that we _do_ generate a destructor for non-concrete arrays, because those
    ' variables may be assigned (and thus take ownership of) a concrete array.
    if destruct then
        'Have a check to see if there's already a destructor.
        'This could occur if there are multiple DIMs in the same function, or the
        'array is a parameter.
        for i = 1 to len(ps_queued_cleanup_nodes$) - 3 step 4
            other = cvl(mid$(ps_queued_cleanup_nodes$, i, 4))
            other_var_node = ast_get_child(other, 1)
            if other->atype = AST_ARRAY_DELETE and _
                other_var_node->ref = var then goto array_dstr_dup
        next i
        node = ast_add_node(AST_ARRAY_DELETE)
        node->attach(var_node)
        ps_queue_cleanup node
    end if
    array_dstr_dup:
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed dim array"
    $end if
end sub

'Expects: First index of array access
'Results: token after )
'Takes array variable as argument
function ps_array_element_access(lvalue)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start array element access"
    $end if
    array_type = type_of_lvalue(lvalue)
    if array_type->tflags <> SYM_TYPE_ARRAY then ps_error "Value is not an array"
    dimensions = array_type->array_dims
    node = ast_add_node(AST_ARRAY_ACCESS)
    node->attach(lvalue)
    do
        node->attach(ps_expr)
    loop while ps_consumed(TOK_COMMA)
    ps_consume TOK_CPAREN
    if ast_num_children(node) - 1 <> dimensions and dimensions <> 0 then
        ps_error "Incorrect number of dimensions"
    end if
    ps_array_element_access = node
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed array element access"
    $end if
end function
