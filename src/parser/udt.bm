'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'udt.bm - Parser for user-defined types

'Expects: TOK_TYPE
'Results: token after END TYPE
sub ps_udt_ignore
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start ignored UDT"
    $end if
    ps_consume TOK_TYPE
    tok_advance 'type name
    if ps_consumed(TOK_NEWLINE) then ps_line_prelude
    do
        dummy = ps_opt_sigil
        do
            tok_advance 'field name
            dummy = ps_opt_sigil
        loop while ps_consumed(TOK_COMMA)
        if ps_consumed(TOK_NEWLINE) then ps_line_prelude
    loop until ps_consumed(TOK_END)
    ps_consume TOK_TYPE
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed ignored UDT"
    $end if
end sub

'Expects: TOK_TYPE
'Results: token after END TYPE
function ps_udt
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start UDT definition"
    $end if
    dim udt_sym as symtab_entry_t
    udt_sym-stype = SYM_TYPE
    udt_sym-fixed_size = 0
    udt_sym-tflags = SYM_TYPE_UDT

    ps_consume TOK_TYPE
    if tok_token <> TOK_UNKNOWN then ps_error "UDT name already in use"
    udt_sym-identifier = ucase$(tok_content$)
    tok_advance
    if ps_consumed(TOK_NEWLINE) then ps_line_prelude
    do
        'Handle As Long X style definitions
        typ = ps_opt_sigil
        do
            elem = ps_udt_element(udt_sym, typ)
            udt_sym-fixed_size = udt_sym-fixed_size + type_fixed_size(elem->type)
        loop while ps_consumed(TOK_COMMA)
        'If we ever need to keep a list of all the elements in a UDT,
        'this is where we'd build it.
        if ps_consumed(TOK_NEWLINE) then ps_line_prelude
    loop until ps_consumed(TOK_END)
    ps_consume TOK_TYPE

    symtab_add_entry udt_sym
    ps_udt = 0 'Never generate any ast nodes
    $if DEBUG_PARSE_TRACE then
    debuginfo "End UDT definition"
    $end if
end function

'Expects: Element identifier
'Results: token after variable (comma or newline)
function ps_udt_element(udt_sym as symtab_entry_t, pre_typ)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start UDT element"
    $end if
    dim elem_sym as symtab_entry_t
    elem_sym-stype = SYM_UDT_ELEMENT
    
    'Because UDT element names appear in such a restricted environment,
    'they can live in their own namespace without conflicting with
    'existing symbols. We just require that the name be an alphanumeric
    'identifier.
    elem_name$ = ucase$(tok_content$)
    select case left$(elem_name$, 1)
    case "A" to "Z", "_"
    case else
        print tok_content$
        ps_error "Invalid UDT element name"
    end select
    for i = 2 to len(elem_name$)
        select case mid$(elem_name$, i, 1)
        case "A" to "Z", "0" to "9", "_"
        case else
            ps_error "Invalid UDT element name"
        end select
    next i
    elem_sym-identifier = udt_sym-identifier + "." + elem_name$
    tok_advance

    'Set type from sigil, AS clause or default type
    sigil = ps_opt_sigil
    if pre_typ > 0 and sigil > 0 and pre_typ <> sigil then
        ps_error "Declared type does not match"
    end if
    if sigil = 0 then sigil = pre_typ
    if sigil = 0 then elem_sym-type = ps_default_type else elem_sym-type = sigil

    'Get offset of element in UDT
    elem_sym-udt_element_offset = udt_sym-fixed_size
    symtab_add_entry elem_sym
    
    ps_udt_element = symtab_last_entry
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed UDT element"
    $end if
end function

'Expects: Element
'Results: token after element
'Takes udt variable as argument
function ps_udt_element_access(lvalue)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start udt element access"
    $end if
    t = type_of_lvalue(lvalue)
    head_typ_name$ = t->identifier
    elem = symtab_get_id(head_typ_name$ + "." + ucase$(tok_content$))
    if elem = 0 or elem->stype <> SYM_UDT_ELEMENT then ps_error "Bad UDT element access"
    tok_advance
    node = ast_add_node(AST_UDT_ACCESS)
    node->attach(lvalue)
    node->ref = elem
    ps_udt_element_access = node
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed udt element access"
    $end if
end function
