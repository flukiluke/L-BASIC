'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'function.bm - Parse rules for function calls

'Expects: function token
'Results: token after last argument
function ps_funccall
    token = tok_token
    tok_advance
    ps_funccall = ps_funccall_p(token)
end function

'Expects: token after function, function token as arg
'Results: token after last argument
function ps_funccall_p(func)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start function call"
    $end if
    root = ast_add_node(AST_CALL)
    ast_nodes(root).ref = func
    sigil = ps_opt_sigil
    if tok_token = TOK_OPAREN then
        ps_consume TOK_OPAREN
        ps_funcargs root, type_sigt_create$(TYPE_ANY), FALSE
        ps_consume TOK_CPAREN
    else
       'function has no arguments
        matching_sig = type_find_sig_match(func, type_sigt_create$(TYPE_ANY))
        if matching_sig = 0 then ps_error "Cannot find matching type signature"
        ast_nodes(root).ref2 = matching_sig
        'Add any optional arguments at end
        for i = 1 to type_sig_numargs(matching_sig)
            ast_attach root, ast_add_node(AST_NONE)
        next i
    end if
    if sigil > 0 and sigil <> type_of_call(root) then ps_error "Function must have correct type suffix if present"
    ps_funccall_p = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed function call"
    $end if
 end function

'Expects: first token after function name
'Results: token after argument list
sub ps_funcargs(root, candidate$, is_statement)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start funcargs"
    $end if
    'Handle empty argument at start
    if tok_token = TOK_COMMA then ps_funcarg root, candidate$, suppress_comma
    'Loop over arguments and build candidate$ as a list of argument types
    do
        'is_statement allows ) to appear in statements, whereas it terminates a function
        if ps_is_terminator(tok_token) or (not is_statement and tok_token = TOK_CPAREN) then exit do
        select case tok_token
        case TOK_COMMA
            ps_consume TOK_COMMA
            ps_funcarg root, candidate$, suppress_comma
        case else
            ps_funcarg root, candidate$, suppress_comma
        end select
    $if DEBUG_PARSE_TRACE then
    debuginfo "Candidate is now " + type_human_sig$(candidate$)
    $end if
    loop
    'candidate$ may match multiple sigs; decide which fits "best". See type.bm for
    'details on what "best" means. This may still fail because the candidate has only
    'been checked as a prefix, never for an exect match on the number of arguments.
    best_sig = type_find_sig_match(ast_nodes(root).ref, candidate$)
    if best_sig = 0 then ps_error "Cannot find matching type signature"
    ast_nodes(root).ref2 = best_sig

    'Modify argument nodes to add in casts where needed
    for i = 1 to ast_num_children(root)
        expr = ast_get_child(root, i)
        expr_type = type_of_expr(expr)
        'The skip value allows us to skip over token that are in the sig but don't
        'get a corresponding ast node.
        do while not type_sig_concrete_arg(best_sig, i + skip)
            skip = skip + 1
        loop
        if i + skip > type_sig_numargs(best_sig) then exit for
        arg_type = type_sig_argtype(best_sig, i + skip)
        if not (expr_type = arg_type or _
                expr_type = TYPE_NONE or _
                expr_type = TYPE_FLAGS) then
            ast_replace_child root, i, ast_add_cast(expr, arg_type)
        end if
    next i
    'Add any optional arguments at end
    for i = ast_num_children(root) + 1 to type_sig_numargs_concrete(best_sig)
        ast_attach root, ast_add_node(AST_NONE)
    next i
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed funcargs"
    $end if
end sub

sub ps_funcarg(root, candidate$, suppress_comma)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start funcarg"
    $end if
    func = ast_nodes(root).ref
    expects$ = type_sig_prefix_nexts$(func, candidate$, 0)
    suppress_comma = FALSE
    'Step 1: Check if any tokens or contextual arguments are present
    for i = 1 to type_sigt_numargs(expects$)
        expected_type = type_sigt_argtype(expects$, i)
        expected_flags = type_sigt_argflags(expects$, i)
        if (expected_flags AND TYPE_TOKEN) > 0 and expected_type = tok_token then
            'We have found a literal token we were told to expect
            typ = expected_type
            flags = expected_flags
            if expected_flags AND TYPE_SYNTAX_ONLY then
                'Don't generate any ast nodes, but add this to the candidate
                expr = 0
            else
                'We need to generate an AST_FLAGS for this
                expr = ast_add_node(AST_FLAGS)
                ast_nodes(expr).ref = AST_FLAG_TOKEN
                ast_nodes(expr).ref2 = typ
            end if
            tok_advance
            suppress_comma = TRUE
            goto arg_done
        elseif expected_flags AND TYPE_CONTEXTUAL then
            l = instr(ast_constants(expected_type), "|" + ucase$(tok_content$) + "|")
            ast_nodes(expr).ref2 = 0
            if l then
                'We have found a matching contextual argument
                typ = expected_type
                flags = expected_flags
                expr = ast_add_node(AST_FLAGS)
                ast_nodes(expr).ref = AST_FLAG_CONTEXTUAL
                do while l > 1
                    ast_nodes(expr).ref2 = ast_nodes(expr).ref2 + 1
                    l = _instrrev(l - 1, ast_constants(expected_type), "|")
                loop
                ast_nodes(expr).ref2 = ast_nodes(expr).ref2 + 1
                tok_advance
                suppress_comma = TRUE
                goto arg_done
            end if
        end if
    next i
    'Step 2: The file handle prefix (#)
    if ps_consumed(TOK_DOUBLE_SFX) then flags = TYPE_FILEHANDLE
    'Step 3a: Try parse an expression
    if tok_token = TOK_COMMA then
        'empty argument
        expr = ast_add_node(AST_NONE)
        flags = flags or TYPE_BYREF
    else
        expr = ps_expr
        if type_is_lvalue(expr) then flags = flags or TYPE_BYREF
    end if
    'Step 3b: See if that expression fits type-wise
    typ = type_of_expr(expr)
    for i = 1 to type_sigt_numargs(expects$)
        expected_type = type_sigt_argtype(expects$, i)
        expected_flags = type_sigt_argflags(expects$, i)
        'it's unclear if "or (expected_type = 0 and expected_flags = 0)" is needed in
        'the below condition.
        if type_sig_compatible_arg(expected_type, expected_flags, typ, flags, 0) then
            ok = TRUE
        end if
    next i
    if not ok then ps_error "Bad argument type " + type_human_readable$(typ)

    arg_done:
    'Step 4a: If the processed arg skipped some optional components, add those optional
    'components as placeholders
    for i = 1 to type_sigt_flagval(flags)
        ast_attach root, ast_add_node(AST_NONE)
    next i
    'Step 4b: Add ast node if any
    if expr then ast_attach root, expr
    
    'Step 5: Like step 4 for for the candidate
    for i = 1 to type_sigt_flagval(flags)
        candidate$ = type_sigt_add_arg(candidate$, TYPE_NONE, 0)
    next i
    candidate$ = type_sigt_add_arg(candidate$, typ, flags)
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed funcarg"
    $end if
end sub
