'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'var.bm - Parse rules for DIM and variables

'Expects: TOK_DIM
'Results: token after last declaration
'Format: DIM variablelist
function ps_dim
    debuginfo "Start dim"
    ps_consume TOK_DIM
    if ps_consumed(TOK_SHARED) then is_shared = TRUE
    do
        if tok_token <> TOK_UNKNOWN then ps_error "Expected new variable name"
        'This is a little messy because we have to look-ahead some to see if
        'it's a scalar or array.
        variable_name$ = tok_content$
        tok_advance
        sigil = ps_opt_sigil
        if ps_consumed(TOK_OPAREN) then
            'Array declaration.
            'The block holds all resizes declared in this DIM statement
            if block = 0 then block = ast_add_node(AST_BLOCK)
            ps_new_array variable_name$, sigil, block
        else
            'Just a regular variable
            dummy = ps_new_var_pp(variable_name$, sigil, is_shared)
        end if
    loop while ps_consumed(TOK_COMMA)
    ps_dim = block
    debuginfo "Completed dim"
end function

function ps_lvalue
    token = tok_token
    content$ = tok_content$
    tok_advance
    ps_lvalue = ps_lvalue_p(token, content$)
end function

function ps_lvalue_mutable
    node = ps_lvalue
    if symtab(ast_nodes(node).ref).v3 then ps_error "Cannot reassign CONST"
    ps_lvalue_mutable = node
end function

function ps_lvalue_p(head, content$)
    debuginfo "Start lvalue"
    node = ps_simple_variable_p(head, content$)
    do while tok_token = TOK_DOT or tok_token = TOK_OPAREN
        if ps_consumed(TOK_DOT) then
            'UDT element access
            node = ps_udt_element_access(node)
        elseif ps_consumed(TOK_OPAREN) and not ps_consumed(TOK_CPAREN) then
            'array access. Something like `a()` is a reference to the entire array,
            'so no access operation needed.
            node = ps_array_element_access(node)
        end if
    loop
    ps_lvalue_p = node
    debuginfo "Completed lvalue"
end function

function ps_simple_variable
    token = tok_token
    content$ = tok_content$
    tok_advance
    ps_simple_variable = ps_simple_variable_p(token, content$)
end function

'Expects: token after variable, variable token as arg
'Results: token after optional sigil
'Note: process simple variables, i.e. no udt or array stuff. Returns AST_VAR.
function ps_simple_variable_p(head, content$)
    debuginfo "Start simple variable"
    node = ast_add_node(AST_VAR)
    if head = TOK_UNKNOWN then
        'Add new variable (implicit declaration)
        ast_nodes(node).ref = ps_new_var_p(content$)
    elseif symtab(head).typ <> SYM_VARIABLE then
        ps_error "Expected variable"
    else
        'Existing variable
        sigil = ps_opt_sigil
        current_type = symtab(head).v1
        if symtab(current_type).v2 = SYM_TYPE_ARRAY then current_type = symtab(current_type).v3
        if sigil and sigil <> current_type then ps_error "Type suffix does not match existing variable type"
        ast_nodes(node).ref = head
    end if

    ps_simple_variable_p = node
    debuginfo "Completed simple variable"
end function

'Expects: sigil or otherwise
'Results: post token if sigil present, unchanged otherwise
function ps_opt_sigil
    debuginfo "Start optional sigil"
    if ps_consumed(TOK_AS) then
        typ = tok_token
        if typ = 0 or symtab(typ).typ <> SYM_TYPE then ps_error "Expected type name"
    else
        select case tok_token
        case TOK_INTEGER_SFX
            typ = TYPE_INTEGER
        case TOK_LONG_SFX
            typ = TYPE_LONG
        case TOK_INTEGER64_SFX
            typ = TYPE_INTEGER64
        case TOK_SINGLE_SFX
            typ = TYPE_SINGLE
        case TOK_DOUBLE_SFX
            typ = TYPE_DOUBLE
        case TOK_QUAD_SFX
            typ = TYPE_QUAD
        case TOK_STRING_SFX
            typ = TYPE_STRING
        case else
            typ = 0
        end select
    end if
    if typ then tok_advance
    ps_opt_sigil = typ
    debuginfo "Completed optional sigil"
end function

function ps_new_var_p(var_name$)
    sigil = ps_opt_sigil
    ps_new_var_p = ps_new_var_pp(var_name$, sigil, FALSE)
end function

function ps_new_var_pp(var_name$, sigil, is_shared)
    dim sym as symtab_entry_t
    if is_shared then
        sym.identifier = ucase$(var_name$)
    else
        sym.identifier = ps_scope$ + ucase$(var_name$)
    end if
    sym.typ = SYM_VARIABLE
    if sigil then sym.v1 = sigil else sym.v1 = ps_default_type
    sym.v2 = ps_next_var_index
    ps_next_var_index = ps_next_var_index + type_fixed_size(sym.v1)
    symtab_add_entry sym
    ps_new_var_pp = symtab_last_entry
end function
