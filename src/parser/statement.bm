'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'statement.bm - Parse rules for statements

'Expects: first token of statement
'Results: NEWLINE or block end marker
'Returns:
'   -2 -> a SUB or FUNCTION was defined (useful for interactive mode to know)
'   -1 ->  end of a block
'   0 -> statement did not generate any ast nodes
'   > 0 -> ast node
function ps_stmt
    ps_line_prelude

    if tok_token = TOK_LINENUM then ps_label
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start statement"
    $end if
    'Sigh
    if tok_token = TOK_LINE and ucase$(tok_next_content$) = "INPUT" then tok_token = TOK_LINEINPUT
    select case tok_token
        case is < 0
            ps_error "Unexpected literal " + tok_content$
        case META_LIST
            ps_meta_list
        case META_DEBUG
            ps_meta_debug
        case TOK_CONST
            stmt = ps_const
        case TOK_DECLARE
            stmt = ps_declare
        case TOK_DIM, TOK_REDIM
            'REDIM is treated as an alias for DIM
            stmt = ps_dim
        case TOK_DO
            stmt = ps_do
        case TOK_EXIT
            stmt = ps_exit
        case TOK_FOR
            stmt = ps_for
        case TOK_FUNCTION
            stmt = ps_userfunc
        case TOK_GOTO
            stmt = ps_goto
        case TOK_IF
            stmt = ps_if
        case TOK_INPUT, TOK_LINEINPUT
            'These two are so similar, we parse them as the same function
            stmt = ps_stmt_input
        case TOK_OPEN
            stmt = ps_open
        case TOK_PRINT
            stmt = ps_print
        case TOK_SELECT
            stmt = ps_select
        case TOK_SUB
            stmt = ps_userfunc
        case TOK_TYPE
            stmt = ps_udt
        case TOK_WHILE
            stmt = ps_while
        case TOK_UNKNOWN
            stmt = ps_assignment
        case TOK_NEWLINE
            'Blank line; ignore it
            stmt = 0
        'These all end a block in some fashion. The block-specific code will assert the
        'ending token, but we check it's syntactically valid here.
        case TOK_END
            'We can't check tok_next_token because it does not always contain correct look-ahead information
            next_content$ = ucase$(tok_next_content$)
            nesting = ast_nodes(ps_final_nested).typ
            if next_content$ <> "IF" and _
                next_content$ <> "SELECT" and _
                next_content$ <> "SUB" and _
                next_content$ <> "FUNCTION" then
                'Handle regular END command
                stmt = ps_stmtreg
            elseif nesting <> AST_IF and nesting <> AST_SELECT and nesting <> AST_PROCEDURE then
                ps_error "Unexpected END"
            else
                stmt = -1
            end if
        case TOK_ELSE, TOK_ELSEIF
            if ast_nodes(ps_final_nested).typ <> AST_IF then ps_error tok_human_readable$(tok_token) + " without IF"
            stmt = -1
        case TOK_LOOP
            if ast_nodes(ps_final_nested).typ <> AST_DO_PRE and ast_nodes(ps_final_nested).typ <> AST_DO_POST then ps_error "LOOP without DO"
            stmt = -1
        case TOK_WEND
            if ast_nodes(ps_final_nested).typ <> AST_WHILE then ps_error "WEND without WHILE"
            stmt = -1
        case TOK_NEXT
            if ast_nodes(ps_final_nested).typ <> AST_FOR then ps_error "NEXT without FOR"
            stmt = -1
        case TOK_CASE
            if ast_nodes(ps_final_nested).typ <> AST_SELECT then ps_error "CASE without SELECT"
            stmt = -1
        case TOK_IEOF
            if ps_final_nested <> 0 then ps_error "Unexpected end of file"
            stmt = -1
        case else
            select case symtab(tok_token).typ
            case SYM_VARIABLE
                stmt = ps_assignment
            case SYM_FUNCTION
                stmt = ps_stmtreg
            case else
                ps_error tok_human_readable$(tok_token) + " (" + tok_content$ + ") doesn't belong here"
            end select
    end select

    ps_attach_labels stmt

    ps_stmt = stmt
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed statement"
    $end if
end function


'Expects: statement token
'Results: token after last argument
function ps_stmtreg
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start stmtreg"
    $end if
    'Is this in fact assigning the return value of a function?
    root = ps_func_return
    if root = 0 then
        'Nope, it's just a statement
        root = ast_add_node(AST_CALL)
        ast_nodes(root).ref = tok_token
        tok_advance
        'TYPE_NONE to indicate we have no return value
        ps_funcargs root, type_sigt_create$(TYPE_NONE), TRUE
    end if
    ps_stmtreg = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed stmtreg"
    $end if
end function
