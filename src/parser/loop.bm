'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'loop.bm - Parse rules for DO LOOP and WHILE WEND

'Expects: WHILE
'Results: NEWLINE after WEND
function ps_while
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start WHILE loop"
    $end if
    root = ast_add_node(AST_WHILE)
    ps_add_nested_structure root
    ps_consume TOK_WHILE

    ast_attach root, ps_expr
    ps_consume TOK_NEWLINE

    ast_attach root, ps_block
    ps_consume TOK_WEND

    ps_remove_nested_structure
    ps_while = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed WHILE loop"
    $end if
end function

'Expects: DO
'Results: NEWLINE after LOOP or condition
function ps_do
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start DO loop"
    $end if
    ps_consume TOK_DO
    if tok_token = TOK_WHILE or tok_token = TOK_UNTIL then ps_do = ps_do_pre else ps_do = ps_do_post
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed DO loop"
    $end if
end function

'Expects: WHILE or UNTIL
'Results: NEWLINE after LOOP
function ps_do_pre
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start DO-pre loop"
    $end if
    root = ast_add_node(AST_DO_PRE)
    ps_add_nested_structure root
    if tok_token = TOK_UNTIL then
        ps_consume TOK_UNTIL
        'Need to invert guard condition
        guard = ast_add_node(AST_CALL)
        ast_nodes(guard).ref = TOK_EQUALS
        sig$ = type_sigt_add_arg(type_sigt_add_arg(type_sigt_create$(TYPE_ANY), TYPE_INTEGER, 0), TYPE_INTEGER, 0)
        ast_nodes(guard).ref2 = type_find_sig_match(TOK_EQUALS, sig$)
        ast_attach guard, ps_expr
        f = ast_add_node(AST_CONSTANT)
        ast_nodes(f).ref = AST_FALSE
        ast_attach guard, f
    else
        ps_consume TOK_WHILE
        guard = ps_expr
    end if
    ast_attach root, guard
    ps_consume TOK_NEWLINE

    ast_attach root, ps_block
    ps_consume TOK_LOOP

    ps_remove_nested_structure
    ps_do_pre = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed DO-pre loop"
    $end if
end function

'Expects: NEWLINE
'Results: NEWLINE after loop guard condition
function ps_do_post
    $if DEBUG_PARSE_TRACE then
    debuginfo "Start DO-post loop"
    $end if
    ps_consume TOK_NEWLINE
    root = ast_add_node(AST_DO_POST)
    ps_add_nested_structure root
    block = ps_block

    ps_consume TOK_LOOP
    if tok_token = TOK_UNTIL then
        ps_consume TOK_UNTIL
        'Need to invert guard condition
        guard = ast_add_node(AST_CALL)
        ast_nodes(guard).ref = TOK_EQUALS
        sig$ = type_sigt_add_arg(type_sigt_add_arg(type_sigt_create$(TYPE_ANY), TYPE_INTEGER, 0), TYPE_INTEGER, 0)
        ast_nodes(guard).ref2 = type_find_sig_match(TOK_EQUALS, sig$)
        ast_attach guard, ps_expr
        f = ast_add_node(AST_CONSTANT)
        ast_nodes(f).ref = AST_FALSE
        ast_attach guard, f
    elseif tok_token = TOK_WHILE then
        ps_consume TOK_WHILE
        guard = ps_expr
    else
        'Infinite loop
        guard = ast_add_node(AST_CONSTANT)
        ast_nodes(guard).ref = AST_TRUE
    end if
    ast_attach root, guard
    ast_attach root, block

    ps_remove_nested_structure
    ps_do_post = root
    $if DEBUG_PARSE_TRACE then
    debuginfo "Completed DO-post loop"
    $end if
end function
