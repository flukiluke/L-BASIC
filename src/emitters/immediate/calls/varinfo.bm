'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'varinfo.bm - Various variable interrogation function

case TOK_DIM
    'This is the DIM function
    child = ast_get_child(node, 1)
    imm_eval child, v1
    result.n = imm_get_at_addr_n(imm_add_offset(v1.n, 1))

case TOK_ERASE
    child = ast_get_child(node, 1)
    addr = imm_get_addr(child)
    data_addr = imm_get_at_addr_n(addr)
    if data_addr <> 0 then
        imm_heap_free data_addr
        imm_set_at_addr_n addr, 0
    end if

case TOK_OPTION
    'The OPTION function to check if an OPTION variable was passed
    child = ast_get_child(node, 1)
    if ast_nodes(child).typ <> AST_VAR then
        'TODO: Implement
        imm_error "OPTION check not supported on arrays & UDTs"
    end if
    sym = ast_nodes(child).ref
    if (symtab(sym).v3 AND SYM_VARIABLE_DEREF) = 0 then
        'Not pass-by-reference, so could not have been optional
        result.n = TRUE
    else
        'Don't use imm_get_addr because that'll attempt to dereference
        addr = imm_stack_base + symtab(sym).v2
        if imm_get_at_addr_n(addr) then
            result.n = TRUE
        else
            result.n = FALSE
        end if
    end if

case TOK_LEN
    child = ast_get_child(node, 1)
    imm_eval child, v1
    select case type_of_expr(child)
    case TYPE_INTEGER
        result.n = len(dummy_integer%)
    case TYPE_LONG
        result.n = len(dummy_long&)
    case TYPE_INTEGER64
        result.n = len(dummy_int64&&)
    case TYPE_SINGLE
        result.n = len(dummy_single!)
    case TYPE_DOUBLE
        result.n = len(dummy_double#)
    case TYPE_QUAD
        'QB64 gives this as 32, but should be 16
        result.n = len(dummy_quad##)
    case TYPE_STRING
        result.n = len(v1.s)
    end select

case TOK_LBOUND
    imm_eval ast_get_child(node, 1), v1
    dimension = ast_get_child(node, 2)
    if ast_is_none(dimension) then v2.n = 1 else imm_eval dimension, v2
    if v2.n < 1 or v2.n > imm_get_at_addr_n(imm_add_offset(v1.n, 1)) then
        error 9
    end if
    result.n = imm_get_at_addr_n(imm_add_offset(v1.n, v2.n * 2))

case TOK_SWAP
    l = ast_get_child(node, 1)
    r = ast_get_child(node, 2)
    l_addr = imm_get_addr(l)
    r_addr = imm_get_addr(r)
    l_type = type_of_lvalue(l)
    r_type = type_of_lvalue(r)
    'TODO check this at compile time!
    if l_type <> r_type then imm_error "Bad SWAP"
    for i = 1 to type_fixed_size(l_type)
        imm_get_at_addr l_addr, v1
        imm_get_at_addr r_addr, v2
        imm_set_at_addr l_addr, v2
        imm_set_at_addr r_addr, v1
    next i

case TOK_UBOUND
    imm_eval ast_get_child(node, 1), v1
    dimension = ast_get_child(node, 2)
    if ast_is_none(dimension) then v2.n = 1 else imm_eval dimension, v2
    if v2.n < 1 or v2.n > imm_get_at_addr_n(imm_add_offset(v1.n, 1)) then
        error 9
    end if
    result.n = imm_get_at_addr_n(imm_add_offset(v1.n, v2.n * 2 + 1))
