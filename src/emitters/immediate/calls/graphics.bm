'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'graphics.bm - Executors for graphics functions

case TOK__BLUE32
    imm_eval ast_get_child(node, 1), v1
    result.n = _red32(v1.n)

case TOK_CIRCLE
    'Node 1 is flag for STEP
    imm_eval ast_get_child(node, 2), v1
    imm_eval ast_get_child(node, 3), v2
    imm_eval ast_get_child(node, 4), v3
    v4.n = _defaultcolor
    c4 = ast_get_child(node, 5)
    if not ast_is_none(c4) then imm_eval c4, v4
    v5.n = 0
    c5 = ast_get_child(node, 6)
    if not ast_is_none(c5) then imm_eval c5, v5
    v6.n = _pi(2)
    c6 = ast_get_child(node, 7)
    if not ast_is_none(c6) then imm_eval c6, v6
    v7.n = 1
    c7 = ast_get_child(node, 8)
    if not ast_is_none(c7) then imm_eval c7, v7
    if not ast_is_none(ast_get_child(node, 1)) then
        circle step (v1.n, v2.n), v3.n, v4.n, v5.n, v6.n, v7.n
    else
        circle (v1.n, v2.n), v3.n, v4.n, v5.n, v6.n, v7.n
    end if

case TOK_DRAW
    imm_eval ast_get_child(node, 1), v1
    draw v1.s

case TOK__GREEN32
    imm_eval ast_get_child(node, 1), v1
    result.n = _green32(v1.n)

case TOK_LINE
    if ast_num_children(node) = 6 then
        src_step = true
        v1.n = 0
        v2.n = 0
        if ast_is_none(ast_get_child(node, 1)) then dest_step = false else dest_step = true
        imm_eval ast_get_child(node, 2), v3
        imm_eval ast_get_child(node, 3), v4
        imm_eval ast_get_child(node, 4), v5
        mode_child = ast_get_child(node, 5)
        style_child = ast_get_child(node, 6)
    else
        if ast_is_none(ast_get_child(node, 1)) then src_step = false else src_step = true
        imm_eval ast_get_child(node, 2), v1
        imm_eval ast_get_child(node, 3), v2
        if ast_is_none(ast_get_child(node, 4)) then dest_step = false else dest_step = true
        imm_eval ast_get_child(node, 5), v3
        imm_eval ast_get_child(node, 6), v4
        imm_eval ast_get_child(node, 7), v5
        mode_child = ast_get_child(node, 8)
        style_child = ast_get_child(node, 9)
    end if
    old_source = _source
    _source _dest
    if src_step then
        v1.n = v1.n + point(2)
        v2.n = v2.n + point(3)
    end if
    _source old_source
    if dest_step then
        v3.n = v3.n + v1.n
        v4.n = v4.n + v2.n
    end if
    if ast_is_none(mode_child) then mode = 0 else mode = ast_nodes(mode_child).ref2
    if ast_is_none(style_child) then v6.n = 65535 else imm_eval style_child, v6
    select case mode
    case 0
        line (v1.n, v2.n)-(v3.n, v4.n), v5.n, , v6.n
    case 1
        line (v1.n, v2.n)-(v3.n, v4.n), v5.n, b, v6.n
    case 2
        line (v1.n, v2.n)-(v3.n, v4.n), v5.n, bf, v6.n
    end select

case TOK__LOADIMAGE
    imm_eval ast_get_child(node, 1), v1
    c1 = ast_get_child(node, 2)
    if ast_is_none(c1) then
        result.n = _loadimage(v1.s)
    else
        imm_eval c1, v2
        result.n = _loadimage(v1.s, v2.n)
    end if

case TOK__NEWIMAGE
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    c3 = ast_get_child(node,3)
    if ast_is_none(c3) then
        result.n = _newimage(v1.n, v2.n)
    else
        imm_eval ast_get_child(node, 3), v3
        result.n = _newimage(v1.n, v2.n, v3.n)
    end if

case TOK_PSET
    imm_eval ast_get_child(node, 2), v1
    imm_eval ast_get_child(node, 3), v2
    v3.n = _defaultcolor
    c3 = ast_get_child(node, 4)
    if not ast_is_none(c3) then imm_eval c3, v3
    if not ast_is_none(ast_get_child(node, 1)) then
        pset step (v1.n, v2.n), v3.n
    else
        pset (v1.n, v2.n), v3.n
    end if

case TOK__PUTIMAGE
    flags = ast_nodes(ast_get_child(node, 1)).ref2
    v5.n = _source
    v6.n = _dest
    imm_eval ast_get_child(node, 6), v5
    imm_eval ast_get_child(node, 7), v6

    v1.n = 0
    v2.n = 0
    imm_eval ast_get_child(node, 2), v1
    imm_eval ast_get_child(node, 3), v2
    if flags AND PUTIMAGE_STEP_SRC1 then
        old_source = _source
        _source v6.n
        v1.n = v1.n + point(2)
        v2.n = v2.n + point(3)
        _source old_source
    end if

    v3.n = _width(v6.n)
    v4.n = _height(v6.n)
    imm_eval ast_get_child(node, 4), v3
    imm_eval ast_get_child(node, 5), v4
    if flags AND PUTIMAGE_STEP_SRC2 then
        v3.n = v3.n + v1.n
        v4.n = v4.n + v2.n
    end if

    v7.n = 0
    v8.n = 0
    imm_eval ast_get_child(node, 8), v7
    imm_eval ast_get_child(node, 9), v8
    if flags AND PUTIMAGE_STEP_DEST1 then
        old_source = _source
        _source v5.n
        v7.n = v7.n + point(2)
        v8.n = v8.n + point(3)
        _source old_source
    end if

    v9.n = _width(v5.n)
    v10.n = _height(v5.n)
    imm_eval ast_get_child(node, 10), v9
    imm_eval ast_get_child(node, 11), v10
    if flags AND PUTIMAGE_STEP_DEST2 then
        v9.n = v9.n + v7.n
        v10.n = v10.n + v8.n
    end if

    if flags AND PUTIMAGE_SMOOTH then
        _putimage (v1.n, v2.n)-(v3.n, v4.n), v5.n, v6.n, (v7.n, v8.n)-(v9.n, v10.n), _smooth
    else
        _putimage (v1.n, v2.n)-(v3.n, v4.n), v5.n, v6.n, (v7.n, v8.n)-(v9.n, v10.n)
    end if
    
    
case TOK__RED32
    imm_eval ast_get_child(node, 1), v1
    result.n = _red32(v1.n)

case TOK__RGB32
    select case ast_num_children(node)
    case 1
        imm_eval ast_get_child(node, 1), v1
        r = _rgb32(v1.n)
    case 2
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        r = _rgb32(v1.n, v2.n)
    case 3
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        imm_eval ast_get_child(node, 3), v3
        r = _rgb32(v1.n, v2.n, v3.n)
    case 4
        imm_eval ast_get_child(node, 1), v1
        imm_eval ast_get_child(node, 2), v2
        imm_eval ast_get_child(node, 3), v3
        imm_eval ast_get_child(node, 4), v4
        r = _rgb32(v1.n, v2.n, v3.n, v4.n)
    end select
    result.n = r

case TOK_SCREEN
    'Ignores second argument
    imm_eval ast_get_child(node, 1), v1
    v2.n = 0
    c2 = ast_get_child(node, 3)
    if not ast_is_none(c2) then imm_eval c2, v2
    v3.n = 0
    c3 = ast_get_child(node, 4)
    if not ast_is_none(c3) then imm_eval c3, v3
    screen v1.n, , v2.n, v3.n
