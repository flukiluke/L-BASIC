'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'string.bm - Executors for string manipulation functions

case TOK_ASC
    imm_eval ast_get_child(node, 1), v1
    if not ast_is_none(ast_get_child(node, 2)) then
        imm_eval ast_get_child(node, 2), v2
        result.n = asc(v1.s, v2.n)
    else
        result.n = asc(v1.s)
    end if

case TOK_CHR
    imm_eval ast_get_child(node, 1), v1
    result.s = chr$(v1.n)

case TOK_CVD
    imm_eval ast_get_child(node, 1), v1
    result.n = cvd(v1.s)

case TOK_CVDMBF
    imm_eval ast_get_child(node, 1), v1
    result.n = cvdmbf(v1.s)

case TOK_CVI
    imm_eval ast_get_child(node, 1), v1
    result.n = cvi(v1.s)

case TOK_CVL
    imm_eval ast_get_child(node, 1), v1
    result.n = cvl(v1.s)

case TOK_CVS
    imm_eval ast_get_child(node, 1), v1
    result.n = cvs(v1.s)

case TOK_CVSMBF
    imm_eval ast_get_child(node, 1), v1
    result.n = cvsmbf(v1.s)

case TOK__DEFLATE
    imm_eval ast_get_child(node, 1), v1
    result.s = _deflate$(v1.s)

case TOK_HEX
    imm_eval ast_get_child(node, 1), v1
    result.s = hex$(v1.n)

case TOK__INFLATE
    imm_eval ast_get_child(node, 1), v1
    result.s = _inflate$(v1.s)

case TOK_INSTR
    v1.n = 1
    haystack = 1
    'TODO: Make this use signature identifiers or something
    if ast_num_children(node) = 3 then
        haystack = 2
        imm_eval ast_get_child(node, 1), v1
    end if
    imm_eval ast_get_child(node, haystack), v2
    imm_eval ast_get_child(node, haystack + 1), v3
    result.n = instr(v1.n, v2.s, v3.s)

case TOK_LEFT
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    result.s = left$(v1.s, v2.n)

case TOK_LCASE
    imm_eval ast_get_child(node, 1), v1
    result.s = lcase$(v1.s)

case TOK_LTRIM
    imm_eval ast_get_child(node,1), v1
    result.s = ltrim$(v1.s)

case TOK_MID
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    if not ast_is_none(ast_get_child(node, 3)) then
        imm_eval ast_get_child(node, 3), v3
        result.s = mid$(v1.s, v2.n, v3.n)
    else
        result.s = mid$(v1.s, v2.n)
    end if

case TOK_RIGHT
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    result.s = right$(v1.s, v2.n)

case TOK_RTRIM
    imm_eval ast_get_child(node, 1), v1
    result.s = rtrim$(v1.s)

case TOK_SPACE
    imm_eval ast_get_child(node, 1), v1
    result.s = space$(v1.n)

case TOK_STR
    imm_eval ast_get_child(node, 1), v1
    result.s = str$(v1.n)

case TOK__STRCMP
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    result.n = _strcmp(v1.s,v2.s)

case TOK__STRICMP
    imm_eval ast_get_child(node, 1), v1
    imm_eval ast_get_child(node, 2), v2
    result.n = _stricmp(v1.s,v2.s)	

case TOK__TRIM
    imm_eval ast_get_child(node, 1), v1
    result.s = _trim$(v1.s)

case TOK_UCASE
    imm_eval ast_get_child(node, 1), v1
    result.s = ucase$(v1.s)

case TOK_VAL
    imm_eval ast_get_child(node, 1), v1
    result.n = val(v1.s)
