'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'file.bm - Executors for file management commands

case TOK_CHDIR
    imm_eval ast_get_child(node, 1), v1
    chdir v1.s

case TOK_CLOSE
    fh = ast_get_child(node, 1)
    if ast_is_none(fh) then
        for i = imm_filehandle_offset + 1 to 255
            close i
        next i
    else
        imm_eval fh, v1
        close #v1.n + imm_filehandle_offset
    end if

case TOK_EOF
    imm_eval ast_get_child(node, 1), v1
    result.n = eof(v1.n + imm_filehandle_offset)

case TOK_FILES
    c1 = ast_get_child(node, 1)
    if ast_is_none(c1) then
        files
    else
        imm_eval c1, v1
        files v1.s
    end if

case TOK_FREEFILE
    result.n = freefile

case TOK_KILL
    imm_eval ast_get_child(node, 1), v1
    kill v1.s

case TOK_LOF
    imm_eval ast_get_child(node, 1), v1
    result.n = lof(v1.n + imm_filehandle_offset)

case TOK_OPEN
    imm_eval ast_get_child(node, 1), v1 'filename
    mode = ast_nodes(ast_get_child(node, 2)).ref2
    imm_eval ast_get_child(node, 3), v2 'file handle
    v2.n = v2.n + imm_filehandle_offset
    v3.n = 128 'len
    reclen = ast_get_child(node, 4)
    if not ast_is_none(reclen) then imm_eval reclen, v3
    select case mode
    case 1
        open v1.s for random as #v2.n len=v3.n
    case 2
        open v1.s for input as #v2.n
    case 3
        open v1.s for output as #v2.n
    case 4
        open v1.s for binary as #v2.n
    case 5
        open v1.s for append as #v2.n
    end select

case TOK_PUT
    imm_eval ast_get_child(node, 1), v1
    v1.n = v1.n + imm_filehandle_offset
    v2.n = seek(v1.n)
    position = ast_get_child(node, 2)
    if not ast_is_none(position) then imm_eval position, v2
    src_var = ast_get_child(node, 3)
    if ast_is_none(src_var) then
        put #v1.n, v2.n
    else
        imm_eval src_var, v3
        select case type_of_expr(src_var)
        case TYPE_INTEGER
            putvar_int% = v3.n
            put #v1.n, v2.n, putvar_int%
        case TYPE_LONG
            putvar_long& = v3.n
            put #v1.n, v2.n, putvar_long&
        case TYPE_INTEGER64
            putvar_int64&& = v3.n
            put #v1.n, v2.n, putvar_int64&&
        case TYPE_SINGLE
            putvar_single! = v3.n
            put #v1.n, v2.n, putvar_single!
        case TYPE_DOUBLE
            putvar_double# = v3.n
            put #v1.n, v2.n, putvar_double#
        case TYPE_QUAD
            putvar_quad## = v3.n
            put #v1.n, v2.n, putvar_quad##
        case TYPE_STRING
            putvar_str$ = v3.s
            put #v1.n, v2.n, putvar_str$
        end select
    end if

case TOK_GET
    imm_eval ast_get_child(node, 1), v1
    v1.n = v1.n + imm_filehandle_offset
    v2.n = seek(v1.n)
    position = ast_get_child(node, 2)
    if not ast_is_none(position) then imm_eval position, v2
    dest_var = ast_get_child(node, 3)
    if ast_is_none(dest_var) then
        get #v1.n, v2.n
    else
        dest_addr = imm_get_addr(dest_var)
        select case type_of_var(dest_var)
        case TYPE_INTEGER
            get #v1.n, v2.n, getvar_int%
            imm_set_at_addr_n dest_addr, getvar_int%
        case TYPE_LONG
            get #v1.n, v2.n, getvar_long&
            imm_set_at_addr_n dest_addr, getvar_long&
        case TYPE_INTEGER64
            get #v1.n, v2.n, getvar_int64&&
            imm_set_at_addr_n dest_addr, getvar_int64&&
        case TYPE_SINGLE
            get #v1.n, v2.n, getvar_single!
            imm_set_at_addr_n dest_addr, getvar_single!
        case TYPE_DOUBLE
            get #v1.n, v2.n, getvar_double#
            imm_set_at_addr_n dest_addr, getvar_double#
        case TYPE_QUAD
            get #v1.n, v2.n, getvar_quad##
            imm_set_at_addr_n dest_addr, getvar_quad##
        case TYPE_STRING
            getvar_string$ = space$(len(imm_get_at_addr_s(dest_addr)))
            get #v1.n, v2.n, getvar_string$
            imm_set_at_addr_s dest_addr, getvar_string$
        end select
    end if
