'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'immediate.bm - Execute a parsed program

sub imm_init
    'ps_next_var_index describes number of variables in the main program
    imm_stack_last = ps_next_var_index - 1
    redim imm_stack(1 to imm_stack_last) as imm_value_t
    'No, I'm not crazy - this explicit initialisation is to
    'work around a QB64 bug where it doesn't set these values
    'properly. Probably something to do with the dynamic-length
    'string in a UDT.
    for i = 1 to imm_stack_last
        imm_stack(i).s = ""
        imm_stack(i).n = 0
    next i
    imm_filehandle_offset = freefile - 1
    imm_heap_init
end sub

sub imm_reinit(stack_size)
    old_last = imm_stack_last
    imm_stack_last = stack_size
    if imm_stack_last > u then redim _preserve imm_stack(1 to imm_stack_last) as imm_value_t
    $if DEBUG_MEM_TRACE then
    debuginfo "Clear stack" + str$(old_last) + " to" + str$(imm_stack_last)
    $end if
    for i = old_last + 1 to imm_stack_last
        imm_stack(i).s = ""
        imm_stack(i).n = 0
    next i
end sub

sub imm_run(node)
    dim dummy_result as imm_value_t
    imm_eval node, dummy_result
end sub

sub imm_error(msg$)
    Error_message$ = msg$
    error 101
end sub

'$include: 'array.bm'
'$include: 'assignment.bm'
'$include: 'block.bm'
'$include: 'call.bm'
'$include: 'eval.bm'
'$include: 'for.bm'
'$include: 'goto.bm'
'$include: 'heap.bm'
'$include: 'if.bm'
'$include: 'loop.bm'
'$include: 'memory.bm'
