'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'call.bm - Executor for CALLs

sub imm_do_call(node, result as imm_value_t)
    if symtab(ast_nodes(node).ref).v2 = SYM_FUNCTION_USER then
        imm_do_call_userfunc node, result
    else
        imm_do_call_internal node, result
    end if
end sub

sub imm_do_call_internal(node, result as imm_value_t)
    dim v1 as imm_value_t
    dim v2 as imm_value_t
    dim v3 as imm_value_t
    dim v4 as imm_value_t
    dim v5 as imm_value_t
    dim v6 as imm_value_t
    dim v7 as imm_value_t
    dim v8 as imm_value_t
    dim v9 as imm_value_t
    dim v10 as imm_value_t
    return_type = type_of_call(node)
    select case ast_nodes(node).ref
    '$include: 'calls/input.bm'
    '$include: 'calls/file.bm'
    '$include: 'calls/font.bm'
    '$include: 'calls/graphics.bm'
    '$include: 'calls/keyboard.bm'
    '$include: 'calls/logic.bm'
    '$include: 'calls/maths.bm'
    '$include: 'calls/mouse.bm'
    '$include: 'calls/os.bm'
    '$include: 'calls/print.bm'
    '$include: 'calls/random.bm'
    '$include: 'calls/rounding.bm'
    '$include: 'calls/screen.bm'
    '$include: 'calls/sound.bm'
    '$include: 'calls/string.bm'
    '$include: 'calls/time.bm'
    '$include: 'calls/varinfo.bm'
    case else
        imm_error "Unhandled call to " + tok_human_readable$(ast_nodes(node).ref)
    end select
    imm_enforce_type result, type_of_call(node)
end sub

sub imm_do_call_userfunc(node, result as imm_value_t)
    proc_id = ast_nodes(node).ref
    proc_node = symtab(proc_id).v3
    num_locals = symtab(proc_id).v4
    if proc_node = 0 then imm_error "Call to unimplemented function"
    'Create new stack frame
    $if DEBUG_MEM_TRACE then
    debuginfo "New stack frame at" + str$(imm_stack_last + 1)
    debuginfo "Allocate"  + str$(num_locals) + " slots"
    $end if
    old_stack_last = imm_stack_last
    old_stack_base = imm_stack_base
    imm_reinit imm_stack_last + num_locals

    'Evaluate and store arguments, left to right
    dim arg as imm_value_t
    for i = 1 to ast_num_children(node)
        arg_node = ast_get_child(node, i)
        if i > ast_num_children(proc_node) - 1 then
            'This should only happen when the function definition doesn't declare
            'all parameters, such as for overriding functions.
            'We still need to evaluate the argument being passed though in case
            'it has side effects.
            imm_eval arg_node, arg
        elseif ast_nodes(arg_node).typ = AST_NONE then
            'Not supplied optional argument, pass a null pointer
            imm_set_at_addr_n old_stack_last + i, 0
        elseif symtab(ast_nodes(ast_get_child(proc_node, i + 1)).ref).v3 AND SYM_VARIABLE_DEREF then
            'Callee needs a reference. Can we just provide a pointer to a passed variable?
            if ast_is_lvalue(arg_node) then
                'Yes, passed argument is an lvalue so we can get a reference to it
                imm_set_at_addr_n old_stack_last + i, imm_get_addr(arg_node)
            else
                'No, we need to make a shadow copy and pass a reference to that.
                'The shadow copy will also be on the stack.
                imm_reinit imm_stack_last + 1
                imm_eval arg_node, arg
                imm_set_at_addr imm_stack_last, arg
                imm_set_at_addr_n old_stack_last + i, imm_stack_last
            end if
        else
            'Force pass-by-value
            arg_node = ast_get_child(node, i)
            imm_eval arg_node, arg
            imm_set_at_addr old_stack_last + i, arg
        end if
    next i
    'If we're expected to return a value, allocate an extra stack slot
    'after the formal arguments and shadow copies to hold that value
    if type_sig_return(ast_nodes(node).ref2) <> TYPE_NONE then
        has_return_value = TRUE
        imm_reinit imm_stack_last + 1
    end if
    'Set frame pointer appropriately (delayed to here so argument evaluation
    'occurs in the caller's stack frame)
    imm_stack_base = old_stack_last
    'Do the call!
    imm_eval ast_get_child(symtab(proc_id).v3, 1), result
    'Collect return value if relevant
    if has_return_value then imm_get_at_addr imm_stack_last, result
    'Restore previous stack frame
    imm_stack_last = imm_stack_base
    imm_stack_base = old_stack_base
    'If we exited early, clear the exit flag (no need to actually check it because
    'we can't nest functions).
    imm_exit_node = 0
end sub
