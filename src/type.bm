'Copyright Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'type.bm - Routines for type management

'The fixed size of a type is the amount of memory/elements needed to store
'a variable of that type, but only counting the fixed-sized info (pointer and size)
'for arrays.
function type_fixed_size(typ)
    type_fixed_size = typ->fixed_size
end function

function type_is_number(typ)
    select case typ
        case TYPE_BOOL, TYPE_INTEGER, TYPE_LONG, TYPE_INTEGER64, TYPE_SINGLE, TYPE_DOUBLE, TYPE_QUAD
            type_is_number = TRUE
    end select
end function

function type_is_int(typ)
    select case typ
        case TYPE_BOOL, TYPE_INTEGER, TYPE_LONG, TYPE_INTEGER64
            type_is_int = TRUE
    end select
end function

function type_is_fp(typ)
    select case typ
        case TYPE_SINGLE, TYPE_DOUBLE, TYPE_QUAD
            type_is_fp = TRUE
    end select
end function

function type_is_array(typ)
    type_is_array = typ->tflags = SYM_TYPE_ARRAY
end function

function type_of_expr(root)
    select case root->atype
    case AST_CONSTANT
        type_of_expr = type_of_constant(root)
    case AST_CALL
        type_of_expr = type_of_call(root)
    case AST_VAR, AST_UDT_ACCESS, AST_ARRAY_ACCESS
        type_of_expr = type_of_lvalue(root)
    case AST_CAST
        type_of_expr = type_of_cast(root)
    case AST_FLAGS
        type_of_expr = TYPE_FLAGS
    case AST_SELECT_VALUE
        type_of_expr = type_of_select_value(root)
    case else
        type_of_expr = TYPE_NONE
    end select
end function

function type_of_lvalue(node)
    select case node->atype
    case AST_VAR
        type_of_lvalue = type_of_var(node)
    case AST_UDT_ACCESS
        type_of_lvalue = type_of_udt_access(node)
    case AST_ARRAY_ACCESS
        type_of_lvalue = type_of_array_access(node)
    end select
end function

function type_of_constant(node)
    type_of_constant = ast_constant_types(node->ref)
end function

function type_of_call(node)
    type_of_call = type_sig_return(node->ref2)
end function

function type_of_var(node)
    ref = node->ref
    type_of_var = ref->type
end function

function type_of_cast(node)
    type_of_cast = node->ref
end function

function type_of_udt_access(node)
    elem = node->ref
    type_of_udt_access = elem->type
end function

function type_of_array_access(node)
    array = ast_get_child(node, 1)
    array_type = type_of_lvalue(array)
    type_of_array_access = array_type->array_type
end function

function type_is_lvalue(node)
    t = node->atype
    type_is_lvalue = t = AST_VAR or t = AST_UDT_ACCESS or t = AST_ARRAY_ACCESS
end function

function type_of_select_value(node)
    type_of_select_value = node->ref
end function

'Can a be cast to b, even with loss?
function type_can_cast(a, b)
    type_can_cast = type_can_safely_cast(a, b) or (type_is_number(a) and type_is_number(b))
end function

'Can a be cast to b without loss of data?
function type_can_safely_cast(a, b)
    if a = b then 'Identity cast
        type_can_safely_cast = TRUE
    elseif b = TYPE_ANY then 'Generic type
        type_can_safely_cast = TRUE
    elseif type_is_array(a) or type_is_array(b) then
        'Both arrays, same number of dimensions (or cast to indeterminate number),
        'and element type is identical (or cast to ANY)
        type_can_safely_cast = type_is_array(a) and type_is_array(b) and _
                                (a->array_dims = b->array_dims or b->array_dims = 0) and _
                                (a->array_type = b->array_type or b->array_type = TYPE_ANY)
    elseif not (type_is_number(a) and type_is_number(b)) then
        type_can_safely_cast = FALSE
    else
        select case a
        case TYPE_BOOL
            type_can_safely_cast = TRUE
        case TYPE_INTEGER
            type_can_safely_cast = (b = TYPE_LONG) or (b = TYPE_INTEGER64) or (b = TYPE_SINGLE) or (b = TYPE_DOUBLE) or (b = TYPE_QUAD)
        case TYPE_LONG
            type_can_safely_cast = (b = TYPE_INTEGER64) or (b = TYPE_DOUBLE) or (b = TYPE_QUAD)
        case TYPE_INTEGER64
            type_can_safely_cast = b = TYPE_QUAD
        case TYPE_SINGLE
            type_can_safely_cast = (b = TYPE_DOUBLE) or (b = TYPE_QUAD)
        case TYPE_DOUBLE
            type_can_safely_cast = b = TYPE_QUAD
        case TYPE_QUAD
            type_can_safely_cast = FALSE
        end select
    end if
end function

function type_make_array(basetype, dimensions)
    dim sym as symtab_entry_t
    array_type_name$ = basetype->identifier + "[" + _trim$(str$(dimensions)) + "]"
    array_type_sym = symtab_get_id(array_type_name$)
    if array_type_sym then
        'Already exists
        type_make_array = array_type_sym
    else
        sym-identifier = array_type_name$
        sym-stype = SYM_TYPE
        sym-fixed_size = 1 'Arrays are pointers to a data structure
        sym-tflags = SYM_TYPE_ARRAY
        sym-array_type = basetype
        sym-array_dims = dimensions
        symtab_add_entry sym
        type_make_array = symtab_last_entry
    end if
end function 
    
'The following functions are helpers to extract data from type signatures. type_sig_*
'variants take a numeric indentifier, type_sigt_* variants take a string holding the
'signature itself. arg_index is one-indexed, so 1 is the first argument in the signature.
'The type signature format (mkl$ encoded type, flags pairs) is used more generally for
'lists of types; in those cases the first component (return type) may be meaningless.

'What is the return type of the given signature?
function type_sig_return(sig_index)
    type_sig_return = type_sigt_return(type_signatures(sig_index).sig)
end function

function type_sigt_return(sig$)
    type_sigt_return = cvl(left$(sig$, 4))
end function

'How many arguments (passed parameters) does a signature have, including all optionals?
function type_sig_numargs(sig_index)
    type_sig_numargs = type_sigt_numargs(type_signatures(sig_index).sig)
end function

'How many arguments excluding components that do not have an ast representation
function type_sig_numargs_concrete(sig_index)
    for i = 1 to type_sig_numargs(sig_index)
        if type_sig_concrete_arg(sig_index, i) then
            result = result + 1
        else
        end if
    next i
    type_sig_numargs_concrete = result
end function

function type_sigt_numargs(sig$)
    type_sigt_numargs = (len(sig$) - 4) / 8
end function

'What is the type of a particular argument in a signature?
function type_sig_argtype(sig_index, arg_index)
    type_sig_argtype = type_sigt_argtype(type_signatures(sig_index).sig, arg_index)
end function

function type_sigt_argtype(sig$, arg_index)
    type_sigt_argtype = cvl(mid$(sig$, arg_index * 8 - 3, 4))
end function

'What are the flags of a particular argument in a signature?
function type_sig_argflags(sig_index, arg_index)
    type_sig_argflags = type_sigt_argflags(type_signatures(sig_index).sig, arg_index)
end function

function type_sigt_argflags(sig$, arg_index)
    type_sigt_argflags = cvl(mid$(sig$, arg_index * 8 + 1, 4))
end function

function type_sigt_flagval(flags)
    type_sigt_flagval = _shr(flags, 16)
end function

function type_sigt_merge$(a$, b$)
    type_sigt_merge$ = a$ + mid$(b$, 5)
end function

sub type_sig_merge(sig_index, b$)
    type_signatures(sig_index).sig = type_signatures(sig_index).sig + mid$(b$, 5)
end function

function type_sig_concrete_arg(sig_index, arg_index)
    flags = type_sig_argflags(sig_index, arg_index)
    type_sig_concrete_arg = (flags AND TYPE_SYNTAX_ONLY) = 0
end function

'Append an argument of the given type and flags to a signature
sub type_sig_add_arg(sig_index, typ, flags)
    type_signatures(sig_index).sig = type_sigt_add_arg$(type_signatures(sig_index).sig, typ, flags)
end sub

function type_sigt_add_arg$(old$, new_argtype, new_argflags)
    type_sigt_add_arg$ = old$ + mkl$(new_argtype) + mkl$(new_argflags)
end function

'Begin a new signature (no type_sig variant because it's unneeded)
function type_sigt_create$(return_type)
    type_sigt_create$ = mkl$(return_type)
end function

'Append a sig to the linked list ending in previous if previous > 0, otherwise start a
'new list
function type_add_sig(previous, sig$)
    type_last_signature = type_last_signature + 1
    if ubound(type_signatures) = type_last_signature then
        redim _preserve type_signatures(type_last_signature * 2) as type_signature_t
    end if
    type_signatures(type_last_signature).sig = sig$
    type_signatures(type_last_signature).succ = 0 'Avoids QB64 compiler bug
    if previous then type_signatures(previous).succ = type_last_signature
    type_add_sig = type_last_signature
end function


'Given an incomplete candidate, what types could we possibly expect to see next?
'Return format is list of 4 bytes padding + mkl$(type) + mkl$(flags). Padding
'allows using type_sigt_* functions to access. mkl$(0) + mkl$(0) means
'"expect end of args".
function type_sig_prefix_nexts$(func, candidate$, depth)
    result$ = type_sigt_create$(0) 'return type is meaningless
    compatibles$ = type_sig_prefix_compatibles$(func, candidate$)
    clen = type_sigt_numargs(candidate$)
    'compatibles$ is list of possible sigs, but we can use type_sigt_* on it anyway
    for i = 1 to type_sigt_numargs(compatibles$)
        'For each sig, determine what token we would be added to the candiate next
        'if it were the true signature being read
        sig_index = type_sigt_argtype(compatibles$, i)
        if type_sig_numargs(sig_index) = clen then
            'there are no more tokens expected for this sig, candidate matches exactly
            result$ = type_sigt_add_arg(result$, 0, 0)
        elseif type_sig_numargs(sig_index) > clen then
            'candidate currently only has a prefix-set of the arguments.
            arg_type = type_sig_argtype(sig_index, clen + 1)
            arg_flags = type_sig_argflags(sig_index, clen + 1) OR _shl(depth, 16)
            result$ = type_sigt_add_arg(result$, arg_type, arg_flags)
            'If that was an optional TYPE_TOKEN, also include the args after it to
            'allow for epsilon transition.
            if (arg_flags AND TYPE_TOKEN) > 0 and (arg_flags AND TYPE_OPTIONAL) > 0 then
                lookahead$ = type_sig_prefix_nexts$(func, type_sigt_add_arg(candidate$, arg_type, arg_flags), depth + 1)
                result$ = type_sigt_merge$(result$, lookahead$)
            end if
        else
            'Should never occur
            ps_error "Impossible sig length"
        end if
    next i
    type_sig_prefix_nexts$ = result$
    $if DEBUG_CALL_RESOLUTION then
    for i = 1 to type_sigt_numargs(result$)
        if type_sigt_argflags(result$, i) and TYPE_CONTEXTUAL then
            debugmsg$ = debugmsg$ + " " + ast_constants(type_sigt_argtype(result$, i)) + "/" + str$(type_sigt_flagval(type_sigt_argflags(result$, i)))
        else
            debugmsg$ = debugmsg$ + " " + type_human_readable$(type_sigt_argtype(result$, i)) + "/" + str$(type_sigt_flagval(type_sigt_argflags(result$, i)))
        end if
    next i
    debuginfo "Nexts list:" + debugmsg$
    $end if
end function

'Given a (possibly incomplete) candidate, find sigs for func that are compatible
'Return format is list of mkl$(sig_index)
function type_sig_prefix_compatibles$(func, candidate$)
    compatibles$ = type_sigt_create$(0)
    sig_index = func->sig
    while sig_index <> 0
        if type_sig_is_prefix_compatible(sig_index, candidate$, 0) then
            compatibles$ = type_sigt_add_arg(compatibles$, sig_index, 0)
        end if
        sig_index = type_signatures(sig_index).succ
    wend
    type_sig_prefix_compatibles$ = compatibles$
end function

function type_sig_is_prefix_compatible(sig_index, candidate$, checkmode)
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "Comparing to " + type_human_sig$(type_signatures(sig_index).sig)
    $end if
    'candidate will generally have ANY or NONE return types for FUNCTION and SUB 
    'contexts respectively. In the future though this may become more specific, 
    'so ensure the actual return type can be cast to what is needed.
    if not type_can_cast(type_sig_return(sig_index), type_sigt_return(candidate$)) then
        $if DEBUG_CALL_RESOLUTION then
        debuginfo "No, return types not compatible"
        $end if
        exit function
    end if
    for argi = 1 to type_sigt_numargs(candidate$)
        if argi > type_sig_numargs(sig_index) then
            'Cannot possibly match, candidate has more args than sig can accept
            $if DEBUG_CALL_RESOLUTION then
            debuginfo "No, candidate has too many arguments"
            $end if
            exit function
        end if
        sig_arg = type_sig_argtype(sig_index, argi)
        sig_flags = type_sig_argflags(sig_index, argi)
        c_arg = type_sigt_argtype(candidate$, argi)
        c_flags = type_sigt_argflags(candidate$, argi)
        if not type_sig_compatible_arg(sig_arg, sig_flags, c_arg, c_flags, checkmode) then
            $if DEBUG_CALL_RESOLUTION then
            debuginfo "No, mismatch on arg" + str$(argi) + " (candidate has " + type_human_readable$(c_arg) + ")"
            $end if
            exit function
        end if
    next argi
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "(Prefix) " + str$(type_sigt_numargs(candidate$)) + " arguments match"
    $end if
    type_sig_is_prefix_compatible = TRUE
end function

'Function call resolution!
'Each function name has one or more signatures. A signature gives the return type and the
'type of each of its arguments. When a call is parsed, a candidate is built which is like
'a signature in that it is a list of the type of each supplied argument and return type
'(a candidate's return type is always NONE or ANY because we can't reliably detect that).
'
'With the candidate we then have to find a signature that matches. The procedure:
'1) 
'   a) Look for a compatible signature. A sig is compatible if all required arguments are
'      supplied, there are not too many optional arguments and all passed arguments can be
'      cast to the expected type.
'   b) if there no matches, fail.
'   c) If there is exactly 1 compatible sig, that is the result.
'   d) If there are multiple strictly compatible sigs, continue to step 2.
'2)
'   a) Of all compatible signatures, select the first one where all the casts are lossless.
'   b) If no sig matches with lossless casts, select the last sig from the list of compatibles.
'
'Rule 1c is the usual case for simple functions. 2a allows polymorphic functions to be listed
'in the tokens.list file in order of increasing type width and the narrowest version that
'doesn't lose data is picked. 2b is a fallback if a cast is inevitable.

function type_find_sig_match(func, candidate$)
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "Function resolution candidate is " + type_human_sig$(candidate$)
    $end if
    sig_index = func->sig
    compatibles$ = type_sigt_create$(0)
    while sig_index <> 0
        if type_sig_is_compatible(sig_index, candidate$, 0) then
            compatibles$ = type_sigt_add_arg$(compatibles$, sig_index, 0)
        end if
        sig_index = type_signatures(sig_index).succ
    wend
    if type_sigt_numargs(compatibles$) = 0 then
        exit function
    elseif type_sigt_numargs(compatibles$) = 1 then
        type_find_sig_match = type_sigt_argtype(compatibles$, 1)
    else
        type_find_sig_match = type_pick_best_compatible_sig(compatibles$, candidate$)
    end if
end function

function type_sig_is_compatible(sig_index, candidate$, checkmode)
    if not type_sig_is_prefix_compatible(sig_index, candidate$, checkmode) then exit function
    for i = type_sigt_numargs(candidate$) + 1 to type_sig_numargs(sig_index)
        'sig has more args; they had better be optional
        if (type_sig_argflags(sig_index, i) AND TYPE_OPTIONAL) = 0 then
            $if DEBUG_CALL_RESOLUTION then
            debuginfo "No, required argument" + str$(i) + " not provided"
            $end if
            exit function
        end if
    next i
    type_sig_is_compatible = TRUE
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "Compatible"
    $end if
end function

function type_pick_best_compatible_sig(compatibles$, candidate$)
    'Picks the first sig that has lossless casts, otherwise the last sig if
    'no lossless casts are available.
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "Looking for a safe cast option"
    $end if
    for i = 1 to type_sigt_numargs(compatibles$)
        sig_index = type_sigt_argtype(compatibles$, i)
        if type_sig_is_compatible(sig_index, candidate$, 1) then
            type_pick_best_compatible_sig = sig_index
            $if DEBUG_CALL_RESOLUTION then
            debuginfo "Safe signature found."
            $end if
            exit function
        end if
    next i
    $if DEBUG_CALL_RESOLUTION then
    debuginfo "No safe signature found."
    $end if
    'Default to last sig on list
    type_pick_best_compatible_sig = type_sigt_argtype(compatibles$, type_sigt_numargs(compatibles$))
end function

function type_sig_compatible_arg(sig_arg, sig_flags, c_arg, c_flags, checkmode)
    'checkmode = 0 for lossy casts, 1 for lossless casts only
    if c_arg = TYPE_NONE then
        result = (sig_flags and TYPE_OPTIONAL) > 0
    elseif sig_flags and TYPE_BYREF then
        'Hardcoded check for TYPE_ANY, TYPE_ANY_ARRAY to allow for functions that really take any variable, array
        result = (c_flags and TYPE_BYREF) > 0 and (sig_arg = c_arg or sig_arg = TYPE_ANY or (sig_arg = TYPE_ANY_ARRAY and type_is_array(c_arg)))
    elseif checkmode = 0 then
        result = type_can_cast(c_arg, sig_arg)
    elseif checkmode = 1 then
        result = type_can_safely_cast(c_arg, sig_arg)
    end if
    fh_ok = ((c_flags and TYPE_FILEHANDLE) <> 0) imp ((sig_flags and TYPE_FILEHANDLE) <> 0)
    result = result and (fh_ok <> 0)
    type_sig_compatible_arg = result
end function

function type_human_readable$(typ)
    id$ = typ->identifier
    'Remove any name mangling
    if left$(id$, 1) = "|" then id$ = mid$(id$, 2)
    type_human_readable$ = id$
end function

function type_human_sig$(sig$)
    o$ = type_human_readable$(type_sigt_return(sig$)) + "("
    for p = 1 to type_sigt_numargs(sig$)
        flags = type_sigt_argflags(sig$, p)
        if flags and TYPE_BYVAL then o$ = o$ + "BYVAL "
        if flags and TYPE_BYREF then o$ = o$ + "BYREF "
        if flags and TYPE_OPTIONAL then o$ = o$ + "OPTION "
        if flags and TYPE_FILEHANDLE then o$ = o$ + "#"
        if flags and TYPE_TOKEN then
            o$ = o$ + tok_human_readable$(type_sigt_argtype(sig$, p))
        elseif flags and TYPE_CONTEXTUAL then
            o$ = o$ + ast_constants(type_sigt_argtype(sig$, p))
        else
            o$ = o$ + type_human_readable$(type_sigt_argtype(sig$, p))
        end if
        o$ = o$ + ", "
    next p
    if right$(o$, 2) = ", " then o$ = left$(o$, len(o$) - 2) 'Trim trailing comma
    type_human_sig$ = o$ + ")"
end function
 
function type_detect_numint_type(content$)
    '2^15-1 = 32767
    '2^31-1 = 2147483647
    '2^63-1 = 18446744073709551615
    select case len(content$)
    'Do not try detect TYPE_BOOL because we don't see the negative sign
    'that would allow is to detect -1.
    case is < 5
        type_detect_numint_type = TYPE_INTEGER
    case 5
        if _strcmp("32767", content$) = -1 then
            type_detect_numint_type = TYPE_LONG
        else
            type_detect_numint_type = TYPE_INTEGER
        end if
    case is < 10
        type_detect_numint_type = TYPE_LONG
    case 10
        if _strcmp("2147483647", content$) = -1 then
            type_detect_numint_type = TYPE_INTEGER64
        else
            type_detect_numint_type = TYPE_LONG
        end if
    case is < 20
        type_detect_numint_type = TYPE_INTEGER64
    case 20
        if _strcmp("18446744073709551615", content$) = -1 then
            'Should we be checking for overflow here?
            type_detect_numint_type = TYPE_QUAD
        else
            type_detect_numint_type = TYPE_INTEGER64
        end if
    case > 20
        'Again, should maybe check for overflow here
        type_detect_numint_type = TYPE_QUAD
    end select
end function

function type_detect_numdec_type(content$)
    '<= 7 digits -> single, <= 16 digits -> double
    select case len(content$) - 1 '-1 because there's a decimal point
    case is <= 7
        type_detect_numdec_type = TYPE_SINGLE
    case is <= 16
        type_detect_numdec_type = TYPE_DOUBLE
    case else
        type_detect_numdec_type = TYPE_QUAD
    end select
end function

function type_detect_numexp_type(content$)
    'e -> single, d -> double, (q -> quad ?)
    for i = 1 to len(content$)
        if asc(content$, i) = 68 or asc(content$, i) = 100 then 'd or D
            type_detect_numexp_type = TYPE_DOUBLE
            exit function
        end if
    next i
    type_detect_numexp_type = TYPE_SINGLE
end function
