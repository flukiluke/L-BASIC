'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'ast.bm - Routines for Abstract Syntax Tree

deflng a-z

' Initialise a clean AST
sub ast_init
    redim ast_nodes(10) as ast_node_t
    redim ast_children(10) as string
    ast_last_node = 0
    redim ast_constants(10) as string
    redim ast_constant_types(10) as long
    ast_constants(AST_FALSE) = "0"
    ast_constant_types(AST_FALSE) = TYPE_INTEGER
    ast_constants(AST_TRUE) = "-1"
    ast_constant_types(AST_TRUE) = TYPE_INTEGER
    ast_constants(AST_ONE) = "1"
    ast_constant_types(AST_ONE) = TYPE_INTEGER
    ast_last_constant = 3
    ast_commit
end sub

sub ast_commit
    ast_last_commit_id = ast_last_node
    ast_last_constant_commit_id = ast_last_constant
end sub

sub ast_rollback
    for i = ast_last_commit_id + 1 to ast_last_node
        ast_children(i) = ""
    next i
    ast_last_node = ast_last_commit_id
    ast_last_constant = ast_last_constant_commit_id
end sub

sub ast_clear_entrypoint
    'Sets the main block to have 0 nodes.
    'This doesn't actually delete the nodes, use ast_rollback for that.
    ast_children(AST_ENTRYPOINT) = ""
end sub

function ast_add_constant(token, content$, force_type)
    if ast_last_constant = ubound(ast_constants) then ast_expand_constants_array
    ast_last_constant = ast_last_constant + 1
    select case token
    case TOK_NUMINT
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numint_type(content$)
    case TOK_NUMDEC
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numdec_type(ast_constants(ast_last_constant))
    case TOK_NUMBASE
        ast_constants(ast_last_constant) = ltrim$(str$(val(content$)))
        detected_type = type_detect_numint_type(ast_constants(ast_last_constant))
    case TOK_NUMEXP
        ast_constants(ast_last_constant) = content$
        detected_type = type_detect_numexp_type(ast_constants(ast_last_constant))
    case TOK_STRINGLIT
        'Strip quotes
        ast_constants(ast_last_constant) = mid$(content$, 2, len(content$) - 2)
        detected_type = TYPE_STRING
    case TOK_CONTEXTUAL_ARGUMENT
        ast_constants(ast_last_constant) = "|" + content$ + "|"
        detected_type = TYPE_CONTEXTUAL_ARGUMENT
    end select
    if force_type > 0 then
        'If you've used D or E, don't try and use # or ! as well!
        if token = TOK_NUMEXP or not type_can_safely_cast(detected_type, force_type) then ps_error "Cannot retype constant"
        ast_constant_types(ast_last_constant) = force_type
    else
        ast_constant_types(ast_last_constant) = detected_type
    end if
    ast_add_constant = ast_last_constant
end function
    
function ast_add_node(typ)
    if ast_last_node = ubound(ast_nodes) then ast_expand_nodes_arrays
    ast_last_node = ast_last_node + 1
    ast_nodes(ast_last_node).typ = typ
    ast_nodes(ast_last_node).linenum = ps_actual_linenum
    ast_add_node = ast_last_node
end function

function ast_add_cast(expr, vartyp)
    if vartyp = type_of_expr(expr) or vartyp = TYPE_ANY or vartyp = TYPE_ANY_ARRAY then
        'Don't cast to TYPE_ANY(_ARRAY) because that's just a shorthand
        'for a function that can handle any type.
        ast_add_cast = expr
        exit function
    end if
    cast_node = ast_add_node(AST_CAST)
    ast_nodes(cast_node).ref = vartyp
    ast_attach cast_node, expr
    ast_add_cast = cast_node
end function

sub ast_attach(parent, child)
    if child = 0 or child = -1 then
        $if DEBUG_PARSE_TRACE then
        debuginfo "Not adding child node because it is " + ltrim$(str$(child))
        $end if
        exit sub
    end if
    ast_nodes(child).parent = parent
    ast_children(parent) = ast_children(parent) + mkl$(child)
end sub

sub ast_pre_attach(parent, child)
    if child = 0 or child = -1 then
        $if DEBUG_PARSE_TRACE then
        debuginfo "Not adding child node because it is " + ltrim$(str$(child))
        $end if
        exit sub
    end if
    ast_nodes(child).parent = parent
    ast_children(parent) = mkl$(child) + ast_children(parent)
end sub

function ast_num_children(node)
    ast_num_children = len(ast_children(node)) / len(dummy&)
end function

function ast_is_none(node)
    ast_is_none = ast_nodes(node).typ = AST_NONE
end function

function ast_is_lvalue(node)
    select case ast_nodes(node).typ
    case AST_VAR, AST_ARRAY_ACCESS, AST_UDT_ACCESS
        ast_is_lvalue = TRUE
    end select
end function

function ast_get_child(node, index)
    ast_get_child = cvl(mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)))
end function

sub ast_replace_child(node, index, new_child)
    mid$(ast_children(node), len(dummy&) * (index - 1) + 1, len(dummy&)) = mkl$(new_child)
end sub

'Inverse of ast_get_child. node == ast_get_child(parent, ast_find_child(parent, node))
function ast_find_child(parent, node)
    for i = 1 to ast_num_children(parent)
        if ast_get_child(parent, i) = node then
            ast_find_child = i
            exit function
        end if
    next i
end function

sub ast_expand_nodes_arrays()
    new_size = ubound(ast_nodes) * 2
    redim _preserve ast_nodes(new_size) as ast_node_t
    redim _preserve ast_children(new_size) as string
end sub

sub ast_expand_constants_array()
    new_size = ubound(ast_constants) * 2
    redim _preserve ast_constants(new_size) as string
    redim _preserve ast_constant_types(new_size) as long
end sub

'List of nodes beginning at common ancestor of src & dest, ending at dest
function ast_path_from_ancestor$(src, dest)
    src_path$ = ast_abs_path$(src)
    dest_path$ = ast_abs_path$(dest)
    for i = 1 to len(dest_path$) step 4
        if mid$(src_path$, i, 4) <> mid$(dest_path$, i, 4) then exit for
    next i
    ast_path_from_ancestor$ = mid$(dest_path$, i - 4)
end function

function ast_abs_path$(node)
    n = node
    do
        r$ = mkl$(n) + r$
        n = ast_nodes(n).parent
    loop while n
    ast_abs_path$ = r$
end function
